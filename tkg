#!/bin/bash
function s_3 { sleep 3; }; function s { sleep 0.1; }; function e { echo; }; function r_v { executable=$1; apt-get remove --purge $1 -y; } &> /dev/null; function r_e { executable=$1; dpkg -l | grep -i "$1"; apt-get autoremove -y; apt-get clean; } &> /dev/null; function u_n { apt-get remove -f --purge portmap rsyslog\* apache2\* bind9\* samba\* aptitude\* sudo\* vim nscd xinetd\* xmail\* sendmail\* sendmail-base\* exim4\* -y; r_e "portmap rsyslog apache2 bind9 samba aptitude sudo vim xinetd exim4 xmail sendmail sendmail-base mysql php5 nginx exim4 webmin"; } &> /dev/null; function pc_br { echo -e "\n\e[0m  \e[30;48;5;8m $1 \e[0m \n"; }; function pc_rd { echo -e "\n\e[0m  \e[30;48;5;9m $1 \e[0m \n"; }; function pc_gr { echo -e "\n\e[0m  \e[30;48;5;10m $1 \e[0m \n"; }; function pc_yl { echo -e "\n\e[0m  \e[30;48;5;11m $1 \e[0m \n"; }; function pc_bl { echo -e "\n\e[0m  \e[30;48;5;12m $1 \e[0m \n"; }; function pc_pl { echo -e "\n\e[0m  \e[30;48;5;13m $1 \e[0m \n"; }; function pc_mg { echo -e "\n\e[0m  \e[30;48;5;14m $1 \e[0m \n"; }; function pc_wt { echo -e "\n\e[0m  \e[30;48;5;15m $1 \e[0m \n"; }; function p_i { e; echo -e "\033[00;00m$1"; e; }; function p_r { echo -e "\n\e[0m  \e[30;48;5;9m $1 \e[0m \n"; s; }; function p_gl { echo -e "\e[30;38;5;8m  $1 \e[30;48;5;8m $2 \e[0m \n"; s; }; function ab_ort { e; p_r "  Aborting."; s_3; }; function p_gy { echo -e "\n\e[0m  \e[30;48;5;11m $1 \e[0m\n"; s_3; }; function pl_w { clear; p_r "Please wait while the process is running on background."; p_r "Do not enter any key, it may take a couple seconds or minutes."; }; function ca_fin { p_gl; pc_pl "Can't find that option"; s_3; }; function t { cd ~; ./tkg; }; function r_c { /etc/init.d/rc.local stop; /etc/init.d/rc.local start; }; function b_tm { read -p "`pc_gr "Back to main [enter]:"`"; }; function i_t { executable=$1; apt-get update; apt-get install $1 -y; } &> /dev/null; function a_b { if [ $APT = 'q' ]; then ab_ort; t; fi; }; function a_t { e; read -p "`p_r "Enter addition port [123]|[q]:"`" -r APT; }; function ap_up { apt-get update; apt-get upgrade -y; apt-get dist-upgrade -y; } &> /dev/null; function ip_c { a="`netstat -i | cut -d' ' -f1 | grep eth0`"; b="`netstat -i | cut -d' ' -f1 | grep venet0:0`"; if [ "$a" == "eth0" ]; then IP="`/sbin/ifconfig eth0 | awk -F':| +' '/inet addr/{print $4}'`"; elif [ "$b" == "venet0:0" ]; then IP="`/sbin/ifconfig venet0:0 | awk -F':| +' '/inet addr/{print $4}'`"; fi; }; function ne_t { netstat -tulpn; }; function b_s { apt-get install --no-install-recommends --no-install-suggests gcc make automake autoconf dh-autoreconf file patch perl dh-make debhelper devscripts gnupg lintian quilt libtool pkg-config libssl-dev liblzo2-dev libpam0g-dev libpkcs11-helper1-dev chkconfig apt-utils nano p7zip-full zip unzip dash expect curl cron less dialog screen iptables openssl perl libnet-ssleay-perl libauthen-pam-perl libpam-runtime libio-pty-perl apt-show-versions python -y; } &> /dev/null; function u_d { function r_p { echo -e 'deb http://debian.osuosl.org/debian '$RE' main contrib non-free\ndeb http://nginx.org/packages/debian '$RE' nginx\ndeb http://ftp.osuosl.org/pub/mariadb/repo/5.5/debian '$RE' main' >> /etc/apt/sources.list; wget http://www.dotdeb.org/dotdeb.gpg; cat dotdeb.gpg | apt-key add -; rm -rf dotdeb.gpg; wget http://nginx.org/packages/keys/nginx_signing.key; cat nginx_signing.key | apt-key add -; apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db; rm -rf nginx_signing.key; rm -f /bin/sh; ln -s dash /bin/sh; apt-get update; lsb_release -a; s_3; } &> /dev/null; if [ $RE = "wheezy" ]; then r_p; ap_up; b_s; fi; if [ $RE = "squeeze" ]; then read -p "`p_r "Upgrade Debian 6 to 7? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then RE=`echo wheezy`; r_p; ap_up; b_s; p_r "Its recommended now to reboot your system."; s_3; else r_p; b_s; fi; fi; }; function op_ssh { function a_dp { sed -i 's|Port.*|Port '$APT'|' /etc/ssh/sshd_config; service ssh restart; }; function ssh_one { function wg_s1 { cd /usr/local/src; wget http://mirrors.sonic.net/pub/OpenBSD/OpenSSH/portable/openssh-6.3p1.tar.gz; tar -xzvf openssh-6.3p1.tar.gz; rm -rf openssh-6.3p1.tar.gz; cd openssh-6.3p1; zcat ~/.tkg/.14v2 | patch; ./configure --prefix=/usr/local/src --sysconfdir=/etc/ssh --bindir=/usr/bin/ --sbindir=/usr/sbin --with-pam --with-4in6; make; make install; chown root:root -R *; } &> /dev/null; e; read -p "`p_r "Enter OpenSSH port [123]|[q]:"`" -r APT; a_b; pl_w; wg_s1; a_dp; }; function ssh_two { function wg_s2 { cd /usr/local/src; wget http://mirrors.sonic.net/pub/OpenBSD/OpenSSH/portable/openssh-6.7p1.tar.gz; tar -xzf openssh-6.7p1.tar.gz; rm -rf openssh-6.7p1.tar.gz; cd openssh-6.7p1; ./configure --prefix=/usr/local/src --sysconfdir=/etc/ssh --bindir=/usr/bin/ --sbindir=/usr/sbin --with-pam --with-4in6; make; make install; chown root:root -R *; } &> /dev/null; e;read -p "`p_r "Enter OpenSSH port [123]|[q]:"`" -r APT; a_b; pl_w; wg_s2; a_dp; }; function res_def { e; read -p "`p_r "Restore to repo's OpenSSH?, enter port [123]|[q]:"`" -r APT; a_b; cd ~; pl_w; fssh=`find / -name ssh`; rm -rf $fssh /usr/local/src/{openssh-6.3p1,openssh-6.7p1,share,libexec}; rm -f /usr/local/bin/{scp,sftp,slogin,ssh,ssh-add,ssh-agent,ssh-keygen,ssh-keyscan}; r_v openssh-server\*; r_e openssh-server; mkdir /etc/ssh; i_t openssh-server; a_dp; ne_t; ssh -V; p_gy "OpenSSH restored & running on port $APT"; b_tm; op_ssh; }; function adp_ssh { if [ -e /etc/ssh/sshd_config ]; then a_t; a_b; if [ -e /etc/ssh/.$APT ]; then read -p "`p_r "Found port $APT, remove? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then sed -i 's/^Port '$APT'//' /etc/ssh/sshd_config; rm -rf /etc/ssh/.$APT; s_3; service ssh restart; ne_t; p_i "  Port $APT removed!"; s_3; op_ssh; else ab_ort; op_ssh; fi; fi; echo "Port $APT" >> "/etc/ssh/sshd_config"; touch /etc/ssh/.$APT; s_3;  service ssh restart; ne_t; p_gy "Port $APT added."; b_tm; op_ssh; else e; p_r "Install OpenSSH first."; s_3; op_ssh; fi; }; clear; p_i; p_gl "" "OpenSSH + HPN Patch"; e; p_gl "[1]" "Un|Install OpenSSH_6.7p1"; e; p_gl "[2]" "Un|Install OpenSSH6.3p1-HPN14v2"; e; p_gl [3] "Add|Remove OpenSSH addition port"; e; p_gl [0] "Back to main menu ./tkg"; read -p "`pc_br "Select an option and enter [0-3]:"`" -n 1 -r option; case $option in 1)if [ -e /usr/local/src/openssh-6.3p1 ]; then e; p_r "Restore to repo's OpenSSH first."; s_3; op_ssh; else if [ ! -e /usr/local/src/openssh-6.7p1 ]; then ssh_two; ne_t; service ssh restart; ssh -V; p_gy " OpenSSH6.7p1 installed & running on port $APT"; b_tm; op_ssh; else res_def; op_ssh; fi; fi;; 2)if [ -e /usr/local/src/openssh-6.7p1 ]; then e; p_r "Restore to repo's OpenSSH first."; s_3; op_ssh; else if [ ! -e /usr/local/src/openssh-6.3p1 ]; then ssh_one; ne_t; ssh -V; p_gy "OpenSSH6.3p1-HPN14v2 installed & running on port $APT"; b_tm; op_ssh; else res_def; op_ssh; fi; fi;; 3)adp_ssh;; 0)t;; *)ca_fin; op_ssh; esac; }; function op_drb { function d_r { executable=$1 /etc/init.d/dropbear $1; }; function wg_d1 { cd ~; mkdir drb15; cd drb15; wget http://matt.ucc.asn.au/dropbear/releases/dropbear-2015.67.tar.bz2; tar xvfj dropbear-2015.67.tar.bz2; chown -R root:root *; cd dropbear-2015.67; dpkg-buildpackage; cd ..; dpkg -i dropbear_2015.67-0.1_i386.deb; cd ~; rm -rf drb15; ab="/etc/default/dropbear"; sed -i 's|NO_START=1|NO_START=0|' $ab; sed -i 's|DROPBEAR_PORT=22|DROPBEAR_PORT='$APT'|' $ab; sed -i 's|DROPBEAR_EXTRA_ARGS=|DROPBEAR_EXTRA_ARGS="-p "|' $ab; } &> /dev/null; clear;  p_i; p_gl "" "Dropbear SSH"; e; p_gl "[1]" "Un|Install Dropbear_2015.67"; e; p_gl "[2]" "Add|Remove Dropbear addition port"; e; p_gl [3] "Change Dropbear default port"; e; p_gl [0] "Back to main menu ./tkg"; read -p "`pc_br "Select an option [0-3]:"`" -n 1 -r option; case $option in 1)if [ -e /etc/default/dropbear ]; then e; read -p "`p_r "Uninstall Dropbear? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then e; pl_w; d_r stop; r_v dropbear\*; r_e dropbear; aa=`find / -name dropbear`; rm -rf $aa; ne_t; p_r "Done unstalling Dropbear_2015.67."; b_tm; op_drb; else ab_ort; op_drb; fi; else e; read -p "`p_r "Enter Dropbear port [123]|[q]:"`" -r APT; a_b; pl_w; wg_d1; touch /etc/dropbear/..$APT; d_r restart; ne_t; p_gy "Dropbear installed & running on port $APT"; b_tm; op_drb; fi;; 2)if [ -e /etc/default/dropbear ]; then a_t; a_b; if [ -e /etc/dropbear/.$APT ]; then read -p "`p_r "Found port $APT, remove? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then s_3; sed -i 's/^DROPBEAR_EXTRA_ARGS="-p '$APT'"/DROPBEAR_EXTRA_ARGS="-p "/' /etc/default/dropbear; rm -rf /etc/dropbear/.$APT; d_r restart; ne_t; p_r "Port $APT removed!"; b_tm; op_drb; else ab_ort; op_drb; fi; fi; s_3; if [ -e /etc/dropbear/..$APT ]; then ne_t; p_r "Port already used at default port."; b_tm; op_drb; fi; sed -i 's/^DROPBEAR_EXTRA_ARGS="-p [0-9]*"/DROPBEAR_EXTRA_ARGS="-p '$APT'"/' /etc/default/dropbear; touch /etc/dropbear/.$APT; d_r restart; ne_t; p_gy "Port $APT added!"; b_tm; op_drb; else e; p_r "Install Dropbear first."; s_3; op_drb; fi;; 3)if [ -e /etc/default/dropbear ]; then e; read -p "`p_r "Change Dropbear default port to [123]|[q]:"`" -r APT; a_b; pl_w; d_r stop; sed -i 's|DROPBEAR_PORT=[0-9]*|DROPBEAR_PORT='$APT'|' /etc/default/dropbear; rm -rf /etc/dropbear/..[0-9]*; touch /etc/dropbear/..$APT; d_r restart; s_3; ne_t; p_gy "Done, Dropbear default port changed to $APT"; b_tm; op_drb; else e; p_r "Install Dropbear first!"; s_3; op_drb; fi;; 0)t;; *)ca_fin; op_drb; esac; }; function o_v { cd ~; function d_m { read -p "`p_r "Enter server IP:"`" -e -i $IP IP; read -p "`p_r "Enter OpenVPN protocol [udp or tcp]:"`" -e -i tcp TYPE; read -p "`p_r "Enter OpenVPN port e.g:"`" -e -i 1194 PORT; }; function os_s { executable=$1 /etc/init.d/openvpn $1; }; function o_ip { echo -e 'dev tun\nscramble obfuscate tkg\nca ca.crt\ncert server.crt\nkey server.key\ndh dh2048.pem\nserver 10.8.0.0 255.255.255.0\nifconfig-pool-persist ipp.txt\npush "redirect-gateway def1 bypass-dhcp"\npush "dhcp-option DNS 8.8.8.8"\npush "dhcp-option DNS 8.8.4.4"\nkeepalive 10 120\ncipher AES-128-CBC\ncomp-lzo\nmax-clients 10\npersist-key\npersist-tun\nstatus openvpn-status.log\nverb 3\ntun-mtu 1500\ntun-mtu-extra 32\nmssfix 1450\ntmp-dir /etc/openvpn/tmp/\nplugin /usr/lib/openvpn/plugins/openvpn-plugin-auth-pam.so /etc/pam.d/login\nusername-as-common-name\nclient-cert-not-required' >> /etc/openvpn/$TYPE$PORT.conf; touch /etc/openvpn/.$TYPE$PORT; if [ -f /etc/openvpn/udp$PORT.conf ]; then echo -e 'sndbuf 393216\nrcvbuf 393216\npush "sndbuf 393216"\npush "rcvbuf 393216"\nport '$PORT'\nproto '$TYPE'' >> /etc/openvpn/udp$PORT.conf; p1=`echo ${PORT:0:1}`; p2=`echo ${PORT:2:4}`; else echo -e 'sndbuf 0\nrcvbuf 0\npush "sndbuf 393216"\npush "rcvbuf 393216"\nport '$PORT'\nproto '$TYPE'' >> /etc/openvpn/tcp$PORT.conf; p1=`echo ${PORT:0:2}`; p2=`echo ${PORT:2:4}`; fi; iptables -t nat -A POSTROUTING -s 10.$p1.$p2.0/24 -j SNAT --to $IP; sed -i '$ i\iptables -t nat -A POSTROUTING -s 10.'$p1'.'$p2'.0/24 -j SNAT --to '$IP'' /etc/rc.local; r_c; sed -i 's|server 10.8.0.0 255.255.255.0|server 10.'$p1'.'$p2'.0 255.255.255.0|' /etc/openvpn/$TYPE$PORT.conf; }; function w_v { if [ ! -e /etc/openvpn/ ]; then e; p_r "Install OpenVPN first"; o_v; fi; }; function ov { CN=/root/$CL-$TYPE$IP-$PORT.ovpn; echo $1 >> $CN; }; function cli_ent { cd /etc/openvpn/; echo -e 'client\ndev tun\nscramble obfuscate tkg\nresolv-retry infinite\nnobind\npersist-key\npersist-tun\nns-cert-type server\ncipher AES-128-CBC\ncomp-lzo\nverb 3\nfast-io\nauth-user-pass\nauth-nocache\n;redirect-gateway def1\nroute 0.0.0.0 0.0.0.0\n;http-poxy-retry\n;http-proxy [proxy] [port]\nscript-security 2' >> ~/$CL-$TYPE-$IP-$PORT.ovpn; ov "proto $TYPE"; ov "remote $IP $PORT"; ov "<ca>"; cat ca.crt >> $CN; ov "</ca>"; }; function ad_au { read -p "`p_r "Enter username e.g:"`" -e -i tkg CL; useradd -M -o -u 112 -s /bin/false $CL &> /dev/null; read -s -p "`p_r "Enter username password :"`" -r PA; e; adau=$(expect -c "; spawn passwd $PA; sleep 2; expect \"\"; send \"$PA\r\"; sleep 2; expect \"\"; send \"$PA\r\"; expect eof;"); echo "$adau" &> /dev/null; }; if [ ! -e /dev/net/tun ]; then clear; p_gy "TUN is not available!"; s_3; o_v; fi; ip_c; clear; p_i; p_gl "" "Scrambled OpenVPN Server PAM Authentication & Additional Protocol Port"; e; p_gl "[1]" "Un|Install OpenVPN"; e; p_gl "[2]" "Add|Remove port"; e; p_gl [3] "Add Username & Config"; e; p_gl [0] "Back to main menu ./tkg"; read -p "`pc_br "Select an option and enter [0-3]:"`" -n 1 -r option; case $option in 1)if [ -e /etc/openvpn ]; then e; read -p "`p_r "Uninstall OpenVPN? [y/n]:"`" -n 1 -r; e; if [[ $REPLY =~ ^[Yy]$ ]]; then pl_w; os_s stop; sed -i '/iptables -t nat -A POSTROUTING -s 10./d' /etc/rc.local; r_c; chkconfig openvpn off; chkconfig --del openvpn; rov=`find / -name openvpn`; rm -rf $rov ~/*.ovpn; e; cat /etc/passwd; p_gy "Done uninstalling OpenVPN, [userdel -r -f] unused username."; b_tm; o_v; else ab_ort; o_v; fi; fi; e; d_m; ad_au; pl_w; function o_bl { mkdir /etc/openvpn; cd /etc/openvpn;mkdir tmp; chmod +x tmp; wget -O 1 http://swupdate.openvpn.org/community/releases/openvpn-2.3.6.zip; unzip 1; wget -O 2 --no-check-certificate https://github.com/clayface/openvpn_xorpatch/archive/master.zip; unzip 2; cp openvpn_xorpatch-master/openvpn_xor.patch openvpn-2.3.6; cd openvpn-2.3.6; git apply --check openvpn_xor.patch; git apply openvpn_xor.patch; ./configure --prefix=/usr; make; make install; cd ..; rm -rf 1 2 openvpn_xorpatch-master openvpn-2.3.6; wget --no-check-cert https://www.dropbox.com/s/nz4dyons6tlsbr4/etcinitdopenvpn.sh -O /etc/init.d/openvpn; chmod +x /etc/init.d/openvpn; update-rc.d openvpn defaults; chkconfig openvpn on; chkconfig --add openvpn; wget --no-check-certificate -O er22t https://github.com/OpenVPN/easy-rsa/archive/2.2.2.tar.gz; tar xzf er22t; cp -R /etc/openvpn/easy-rsa-2.2.2/easy-rsa/2.0 er22; rm -rf er22t easy-rsa-2.2.2; chmod 755 er22 -R; cd er22; cp -u -p openssl-1.0.0.cnf openssl.cnf; sed -i 's|export KEY_SIZE=1024|export KEY_SIZE=2048|' vars; clear; pl_w; source ./vars; ./clean-all; export EASY_RSA="${EASY_RSA:-.}"; "$EASY_RSA/pkitool" --initca $*; export EASY_RSA="${EASY_RSA:-.}"; "$EASY_RSA/pkitool" --server server; ./build-dh; cp -r keys/{ca.crt,ca.key,dh2048.pem,server.crt,server.key} /etc/openvpn; }&> /dev/null; o_bl; o_ip; cli_ent; cd ~; touch /etc/openvpn/.$CL; clear; os_s restart; ne_t; p_gy "OpenVPN installed and running on $TYPE $IP:$PORT"; p_gy "Config for username: $CL"; p_gy "Available at ~/$CL-$TYPE-$IP-$PORT.ovpn"; b_tm; o_v;; 2)w_v; clear; pc_yl "Available OpenVPN protocol & port."; netstat -nlpt | grep openvpn; e; d_m; if [ -e /etc/openvpn/.$TYPE$PORT ]; then read -p "`p_r "Found $TYPE$PORT, remove? [y/n]:"`" -n 1 -r; e; if [[ $REPLY =~ ^[Yy]$ ]]; then os_s stop; ip_c; if [ -f /etc/openvpn/udp$PORT.conf ]; then p1=`echo ${PORT:0:1}`; p2=`echo ${PORT:2:4}`; else p1=`echo ${PORT:0:2}`; p2=`echo ${PORT:2:4}`; fi; sed -i '/iptables -t nat -A POSTROUTING -s 10.'$p1'/d' /etc/rc.local; r_c; rm -rf /etc/openvpn/.$TYPE$PORT /etc/openvpn/$TYPE$PORT.conf; os_s restart; ne_t; p_gy "Done removing $TYPE$PORT"; o_v; else ab_ort; o_v; fi; fi; os_s stop; o_ip; os_s restart; s_3; ne_t; p_gy "Protocol $TYPE & port $PORT added"; p_gy "Edit & add [$TYPE]&[$PORT] to username config."; b_tm; o_v;; 3)w_v; clear; pc_yl "Available OpenVPN protocol & port."; netstat -nlpt | grep openvpn; d_m; if [ ! -e /etc/openvpn/.$TYPE$PORT ]; then e; p_r "$TYPE & $PORT unavailable"; s_3; o_v; fi; ad_au; cli_ent; e; p_gy "Config for username: $CL"; p_gy "Available at ~/$CL-$TYPE-$IP-$PORT.ovpn"; b_tm; o_v;; 0)t;; *)ca_fin; o_v; esac; }; function s_1 { function sos_v { executable=$1 /etc/init.d/vpnserver $1; }; function sos_d { executable=$1; /etc/init.d/dnsmasq $1; }; function i_nd { echo -e '#!/bin/sh\n# chkconfig: 2345 99 01\n# description: SoftEther VPN Server\nif [ ! -e /var/lock/subsys ]; then mkdir /var/lock/subsys; fi; DAEMON=/usr/local/vpnserver/vpnserver; LOCK=/var/lock/subsys/vpnserver; test -x $DAEMON || exit 0; case "$1" in start)$DAEMON start; touch $LOCK;; stop)$DAEMON stop; rm $LOCK;; restart)$DAEMON stop; sleep 2; $DAEMON start;; *)echo "Usage: $0 {start|stop|restart}"; exit 1; esac; exit 0\n' >> /etc/init.d/vpnserver; chmod +x /etc/init.d/vpnserver; }; function rm_i { rm -rf /etc/init.d/vpnserver; }; clear; p_i; p_gl "" "SoftetherVPN Server"; e; p_gl "[1]" "Un|Install SoftetherVPN"; e; p_gl "[2]" "Un|Install SoftetherVPN over tap Local Bridge"; e; p_gl [0] "Back to main menu ./tkg"; read -p "`pc_br "Select an option and enter [0-2]:"`" -n 1 -r option; case $option in 1)if [ -e /etc/init.d/vpnserver ]; then e; read -p "`p_r "Uninstall SoftetherVPN? [y/n]:"`" -n 1 -r; e; if [[ $REPLY =~ ^[Yy]$ ]]; then pl_w; sos_v stop; if [ -e /etc/dnsmasq.conf ]; then sos_d stop; rm_i; i_nd; r_v dnsmasq\*; r_e dnsmasq; sed -i '/iptables -t nat -A POSTROUTING -s 192.168.7.0/d' /etc/rc.local; r_c; fi; chkconfig --del vpnserver; rmv=`find / -name vpnserver`; rm -rf $rmv /var/lock/subsys; rm_i; s_3; ne_t; p_r "Done unistalling SoftetherVPN."; b_tm; s_1; else ab_ort; s_1; fi; else cd ~; pl_w; function se_n { cd /usr/local; wget -O .sof http://goo.gl/BVHNC0; tar zxf .sof; cd vpnserver; so1=$(expect -c "; spawn make; sleep 1; expect \"\"; sleep 6; send \"1\r\"; expect \"\"; sleep 3; send \"1\r\"; expect \"\"; sleep 3; send \"1\r\"; expect eof; "); echo "$so1"; chmod 600 *; chmod 700 vpncmd vpnserver; rm_i; i_nd; mkdir /var/lock/subsys; update-rc.d vpnserver defaults; chkconfig --add vpnserver; sos_v start; so3=$(expect -c "; spawn ./vpncmd; sleep 3; expect \"\"; send \"3\r\"; sleep 3; expect \"\"; send \"check\r\"; sleep 3; expect eof; "); echo "$so3"; so4=$(expect -c "; spawn ./vpncmd; sleep 3; expect \"\"; sleep 3; send \"1\r\"; expect \"\"; sleep 3; send \"localhost:5555\r\"; expect \"\"; sleep 3; send \"\r\"; expect \"\"; sleep 3; send \"ServerPasswordSet\r\"; expect \"\"; sleep 3; send \"12345\r\"; expect \"\"; sleep 3; send \"12345\r\"; expect eof;"); echo "$so4"; } &> /dev/null; se_n; sos_v restart; ne_t; p_r "Default server authentication is set to admin|12345"; p_gy "Link how to configure vpnserver on windows: goo.gl/EgwCDX"; b_tm; cd ~; s_1; fi;; 2)if [ -e /etc/dnsmasq.conf ]; then e; read -p "`p_r "Uninstall SoftetherVPN over tap local bridge? [y/n]:"`" -n 1 -r; e; if [[ $REPLY =~ ^[Yy]$ ]]; then cd ~; pl_w; sos_v stop; sos_d stop; rm_i; i_nd; r_v dnsmasq\*; r_e dnsmasq; sed -i '/iptables -t nat -A POSTROUTING -s 192.168.7.0/d' /etc/rc.local; r_c; sos_v start; s_3; ne_t; p_r "SoftetherVPN over tap local bridge uninstalled."; b_tm; s_1; else ab_ort; s_1; fi; fi; ip_c; if [ ! -e /etc/init.d/vpnserver ]; then p_r " SoftetherVPN not installed!"; s_1; fi; if [ -e /sys/devices/virtual/net/tap_soft ]; then pl_w; i_t dnsmasq; echo -e 'interface=tap_soft\ndhcp-range=tap_soft,192.168.7.50,192.168.7.60,12h\ndhcp-option=tap_soft,3,192.168.7.1' >> /etc/dnsmasq.conf; rm_i; echo -e '#!/bin/sh\n# chkconfig: 2345 99 01\n# description: SoftEther VPN Server\nif [ ! -e /var/lock/subsys ]; then mkdir /var/lock/subsys; fi; DAEMON=/usr/local/vpnserver/vpnserver; LOCK=/var/lock/subsys/vpnserver; TAP_ADDR=192.168.7.1; test -x $DAEMON || exit 0; case "$1" in start)$DAEMON start; touch $LOCK; sleep 1; /sbin/ifconfig tap_soft $TAP_ADDR;; stop)$DAEMON stop; rm $LOCK ;; restart)$DAEMON stop; sleep 1; $DAEMON start; sleep 1; /sbin/ifconfig tap_soft $TAP_ADDR ;; *)echo "Usage: \$0 {start|stop|restart}"; exit 1; esac; exit 0\n' >> /etc/init.d/vpnserver; chmod +x /etc/init.d/vpnserver; v4f=/etc/sysctl.d/ipv4_forwarding.conf; rm -rf $v4f; echo "net.ipv4.ip_forward = 1" >> $v4f; chmod +x $v4f; sysctl --system; s_3; iptables -t nat -A POSTROUTING -s 192.168.7.0/24 -j SNAT --to-source $IP; sed -i '$ i\iptables -t nat -A POSTROUTING -s 192.168.7.0/24 -j SNAT --to-source '$IP'' /etc/rc.local; r_c; sos_v restart; sos_d restart; s_3; ne_t; p_gy "SoftetherVPN over tap local bridge Installed."; b_tm; cd ~; s_1; else echo ") Not found: tap_soft"; p_r "Link how to add tap local bridge on windows: goo.gl/hRPFYK"; p_r "Installer is set to recognize tap \"soft\" name only."; b_tm; s_1; fi;; 0)t;; *)ca_fin; s_1; esac; }; function op_3pr { ip_c; clear; p_i;  p_gl "" "3Proxy Leightweight Proxy"; e; p_gl "[1]" "Un|Install 3Proxy 0.7.1.1"; e; p_gl "[2]" "Add|Remove 3Proxy addition port"; e; p_gl [0] "Back to main menu ./tkg"; e; read -p "`pc_br "Select an option and enter [0-2]:"`" -n 1 -r option; case $option in 1)if [ ! -e /etc/3proxy/3proxy.cfg ]; then e; read -p "`p_r "Enter proxy port :"`" -r APT; read -p "`p_r "Enter proxy username :"`" -r UN; read -s -p "`p_r "Enter proxy password :"`" -r PA; a_b; pl_w; function i_3h { wget http://3proxy.ru/0.7.1.1/3proxy-0.7.1.1.tgz; tar -xvzf 3proxy-0.7.1.1.tgz; chown root:root -R 3proxy; cd 3proxy; make -f Makefile.Linux; chmod 744 src -R; cp -r src /etc/3proxy; cd ~; rm -rf 3proxy 3proxy-0.7.1.1.tgz; } &> /dev/null; i_3h; echo -e 'daemon\nnserver 8.8.8.8\nnserver 8.8.4.4\nnscache 65536\ntimeouts 1 5 30 60 180 1800 15 60\ndeny * * 127.0.0.1,192.168.1.1\nallow * * * 80-88,8080-8088 HTTP\nallow * * * 443,8443 HTTPS\nusers '$UN':CL:'$PA'\nauth strong\nproxy -n -p'$APT' -a\nflush' >> /etc/3proxy/3proxy.cfg; echo -e '#!/bin/sh\n### BEGIN INIT INFO\n# Provides: 3Proxy\n# Required-Start: $remote_fs $syslog\n# Required-Stop: $remote_fs $syslog\n# Default-Start: 2 3 4 5\n# Default-Stop: 0 1 6\n# Short-Description: Initialize 3proxy server\n# Description: starts 3proxy\n### END INIT INFO\ncase "$1" in start)echo Starting 3Proxy; sleep 2; /etc/3proxy/3proxy /etc/3proxy/3proxy.cfg;; stop)echo Stopping 3Proxy; sleep 2; /usr/bin/killall 3proxy;; restart)echo Reloading 3Proxy; /usr/bin/killall -s USR1 3proxy;; *)echo Usage: \$0 "{start|stop|restart}"; exit 1; esac; exit 0\n' >> /etc/init.d/3proxy; chmod +x /etc/init.d/3proxy; touch /etc/3proxy/.$APT; update-rc.d 3proxy defaults; /etc/init.d/3proxy start; s_3; ne_t; p_gy "3Proxy installed & running on $IP:$APT user:$UN pass:[hidden]"; p_gy "3proxy.ru/howtoe.asp#SERVER | /etc/3proxy/3proxy.cfg"; b_tm; cd ~; op_3pr; else e; read -p "`p_r "Uninstall 3Proxy? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then pl_w; /usr/bin/killall 3proxy; s_3; rm -rf /etc/3proxy /etc/init.d/3proxy; s_3; ne_t; p_r "Done unistalling 3Proxy."; b_tm; op_3pr; else ab_ort; op_3pr; fi; fi;; 2)if [ -e /etc/3proxy/3proxy.cfg ]; then a_t; a_b; if [ -e /etc/3proxy/.$APT ]; then read -p "`p_r "Found port $APT, remove? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then /etc/init.d/3proxy stop; sed -i 's/^proxy -n -p'$APT' -a//' /etc/3proxy/3proxy.cfg; rm -rf /etc/3proxy/.$APT; service 3proxy start; s_3; ne_t; p_r "Done, Port $APT removed."; b_tm;  op_3pr; else ab_ort; op_3pr; fi; fi; service 3proxy stop; echo "proxy -n -p$APT -a" >> "/etc/3proxy/3proxy.cfg"; touch /etc/3proxy/.$APT; /etc/init.d/3proxy start; s_3; ne_t; p_gy "Port $APT added!"; b_tm; op_3pr; else e; p_r "Install 3proxy first."; op_3pr; fi;; 0)t;; *)ca_fin; op_3pr; esac; }; function op_sq3 { ip_c; clear; p_i; p_gl "" "Squid3 Proxy With PAM Authentication"; e; p_gl "[1]" "Un|Install Squid3 Proxy"; e; p_gl "[2]" "Add|Remove Squid3 Proxy addition port"; e; p_gl [0] "Back to main menu ./tkg"; read -p "`pc_br "Select an option and enter [0-2]:"`" -n 1 -r option; case $option in 1)if [ -e /etc/squid3/squid.conf ]; then e; read -p "`p_r "Uninstall Squid3 Proxy? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then pl_w; service squid3 stop; rm -rf /etc/squid3/squid.conf /etc/pam.d/squid; r_v squid3; r_e squid3; cat /etc/passwd; p_r "Squid3 Proxy uninstalled, proceed [userdel -r -f] unused user."; b_tm; op_sq3; else ab_ort; op_sq3; fi; fi; e; read -p "`p_r "Enter proxy IP or [Ctrl+c]:"`" -e -i $IP IP; read -p "`p_r "Enter proxy port [123]:"`" -r PO; read -p "`p_r "Enter proxy authentication username:"`" -r UN; useradd -M -o -u 111 -s /bin/false $UN; passwd $UN; clear; pl_w; i_t squid3; cd /etc/squid3; mv squid.conf .sq3f; echo -e 'auth_param basic program /usr/lib/squid3/pam_auth\nauth_param basic children 5\nauth_param basic realm tkg was here\nauth_param basic credentialsttl 2 hours\nacl manager proto cache_object\nacl localhost src 127.0.0.1/32 ::1\nacl to_localhost dst 127.0.0.0/8 0.0.0.0/32 ::1\nacl pam proxy_auth REQUIRED\nacl SSL_ports port 443\nacl Safe_ports port 80\nacl Safe_ports port 21\nacl Safe_ports port 443\nacl Safe_ports port 70\nacl Safe_ports port 210\nacl Safe_ports port 1025-65535\nacl Safe_ports port 280\nacl Safe_ports port 488\nacl Safe_ports port 591\nacl Safe_ports port 777\nacl CONNECT method CONNECT\nhttp_access allow pam\nhttp_access allow manager localhost\nhttp_access deny manager\nhttp_access deny !Safe_ports\nhttp_access deny CONNECT !SSL_ports\nhttp_access deny all\nhierarchy_stoplist cgi-bin ?\ncoredump_dir /var/spool/squid3\ncache deny all\nrefresh_pattern ^ftp:           1440    20%     10080\nrefresh_pattern ^gopher:        1440    0%      1440\nrefresh_pattern -i (/cgi-bin/|\?) 0     0%      0\nrefresh_pattern .               0       20%     4320\nforwarded_for off\nrequest_header_access Allow allow all\nrequest_header_access Authorization allow all\nrequest_header_access Proxy-Authorization allow all\nrequest_header_access Proxy-Authenticate allow all\nrequest_header_access Cache-Control allow all\nrequest_header_access Content-Encoding allow all\nrequest_header_access Content-Length allow all\nrequest_header_access Content-Type allow all\nrequest_header_access Date allow all\nrequest_header_access Expires allow all\nrequest_header_access Host allow all\nrequest_header_access If-Modified-Since allow all\nrequest_header_access Last-Modified allow all\nrequest_header_access Location allow all\nrequest_header_access Pragma allow all\nrequest_header_access Accept allow all\nrequest_header_access Accept-Charset allow all\nrequest_header_access Accept-Encoding allow all\nrequest_header_access Accept-Language allow all\nrequest_header_access Content-Language allow all\nrequest_header_access Mime-Version allow all\nrequest_header_access Retry-After allow all\nrequest_header_access Title allow all\nrequest_header_access Connection allow all\nrequest_header_access Proxy-Connection allow all\nrequest_header_access User-Agent allow all\nrequest_header_access Cookie allow all\nrequest_header_access All deny all\nacl ip1 myip '$IP'\ntcp_outgoing_address '$IP' ip1\nhttp_port '$PO'' >> squid.conf; cp /etc/pam.d/login /etc/pam.d/squid; echo userdel -r $UN >> .$PO; service squid3 restart; s_3; ne_t; p_gy "Installed & running on $IP:$PO user: $UN pass:[hidden]"; b_tm; op_sq3;; 2)if [ -e /etc/squid3/squid.conf ]; then a_t; a_b; if [ -e /etc/squid3/.$APT ]; then read -p "`p_r "Found port $APT, remove? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then service squid3 stop; sed -i 's/^http_port '$APT'//' /etc/squid3/squid.conf; rm -rf /etc/squid3/.$APT; service squid3 start; s_3; ne_t; p_r "Port $APT removed."; b_tm; op_sq3; else ab_ort; op_3pr; fi; fi; service squid3 stop; echo http_port $APT >> "/etc/squid3/squid.conf"; touch /etc/squid3/.$APT; service squid3 restart; s_3; ne_t; p_gy "Port $APT added!"; b_tm; op_sq3; else e; p_r "Install Squid3 Proxy first."; s_3; op_sq3; fi;; 0)t;; *)ca_fin; op_sq3; esac; }; function c_pu { cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo ); cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo ); freq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo ); tram=$( free -m | awk 'NR==2 {print $2}' ); swap=$( free -m | awk 'NR==4 {print $2}' ); up=$(uptime|awk '{ $1=$2=$(NF-6)=$(NF-5)=$(NF-4)=$(NF-3)=$(NF-2)=$(NF-1)=$NF=""; print }'); clear; echo "CPU model : $cname"; echo "Number of cores : $cores"; echo "CPU frequency : $freq MHz"; echo "Total amount of ram : $tram MB"; echo "Total amount of swap : $swap MB"; echo "System uptime : $up"; s_3; }; function sp_ts { function t_ag { read -p "`p_r "Test again? [y/n]:"`" -n 1 -r; e; if [[ $REPLY =~ ^[Yy]$ ]]; then e; t_as; ./sv --share; t_ag; else t; fi; }; function t_as { c_pu; io=$( ( dd if=/dev/zero of=test_$$ bs=64k count=16k conv=fdatasync && rm -f test_$$ ) 2>&1 | awk -F, '{io=$NF} END { print io}' ); echo "I/O speed : $io"; echo "Speed test download speed from : "; undip=$( wget -O /dev/null http://jaran.undip.ac.id/debian/dists/wheezy/Contents-i386.gz 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' ); echo "UNDIP, Indonesia: $undip "; cachefly=$( wget -O /dev/null http://cachefly.cachefly.net/10mb.test 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' ); echo "CacheFly: $cachefly "; coloatatl=$( wget -O /dev/null http://speed.atl.coloat.com/100mb.test 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' ); echo "Colo, Atlanta GA: $coloatatl "; linodejp=$( wget -O /dev/null http://speedtest.tokyo.linode.com/100MB-tokyo.bin 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' ); echo "Linode, Tokyo, JP: $linodejp "; slsg=$( wget -O /dev/null http://speedtest.sng01.softlayer.com/downloads/test10.zip 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' ); echo "Softlayer, Singapore: $slsg "; sldltx=$( wget -O /dev/null http://speedtest.dal05.softlayer.com/downloads/test10.zip 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' ); echo "Softlayer, Amsterdam, NL: $slam"; slwa=$( wget -O /dev/null http://speedtest.sea01.softlayer.com/downloads/test10.zip 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' ); echo "Softlayer, Dallas, TX: $sldltx "; slam=$( wget -O /dev/null http://speedtest.ams01.softlayer.com/downloads/test10.zip 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' ); echo "Softlayer, Seattle, WA: $slwa "; slsjc=$( wget -O /dev/null http://speedtest.sjc01.softlayer.com/downloads/test10.zip 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' ); echo "Softlayer, San Jose, CA: $slsjc "; slwdc=$( wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' ); echo "Softlayer, Washington, DC: $slwdc "; }; if [ ! -e ~/sv ]; then e; wget -O sv --no-check-certificate https://raw.github.com/sivel/speedtest-cli/master/speedtest_cli.py &> /dev/null; chmod 100 sv; fi; clear; p_i; t_as; ./sv --share; t_ag; t; }; function i_bvpn { if [ -e /usr/bin/badvpn-udpgw ]; then e; read -p "`p_r "Uninstall BadVPN-udpgw? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then service badvpn-udpgw stop; rm -f /usr/bin/badvpn-udpgw /etc/init.d/badvpn-udpgw; sed -i 's|screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300||' /etc/rc.local; r_c; s_3; ne_t; p_r "Done uninstalling BadVPN-udpgw"; b_tm; t; else ab_ort; t; fi; fi; e; read -p "`p_r "Install BadVPN-udpgw? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then pl_w; cp ~/.tkg/.bvudp /usr/bin/badvpn-udpgw; echo -e '#!/bin/sh\n### BEGIN INIT INFO\n# Provides: badvpn-udpgw\n# Required-Start: $remote_fs $syslog\n# Required-Stop: $remote_fs $syslog\n# Default-Start: 2 3 4 5\n# Default-Stop: 0 1 6\n# Short-Description: Initialize badvpn-udpgw\n# Description: starts badvpn-udpgw\n### END INIT INFO\ncase "$1" in start)echo starting badvpn-udpgw; screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300; sleep 2; netstat -nlpt | grep 7300; sleep 3;; stop)echo stopping badvpn-udpgw; /usr/bin/killall badvpn-udpgw; sleep 2;; restart)echo restarting badvpn-udpgw; /usr/bin/killall -s USR1 badvpn-udpgw; sleep 2;; *)echo Usage: \$0 "{start|stop|restart}"; exit 1; esac; exit 0\n' >> /etc/init.d/badvpn-udpgw; chmod +x /etc/init.d/badvpn-udpgw; sed -i '$ i\screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300' /etc/rc.local; r_c; update-rc.d badvpn-udpgw defaults; service badvpn-udpgw start; s_3; ne_t; p_gy "BadVPN-udpgw installed"; b_tm; t; else ab_ort; t; fi; }; if [ ! -f /etc/debian_version ]; then p_r "Debian 6/7 32bit only"; s_3; exit; fi; if [ $USER != 'root' ]; then p_r " Run as root"; s_3; exit; fi; if [ ! -e /root/.tkg ]; then clear; p_i; pc_mg "Halo, looks like this is your first time using this auto installer script."; sleep 1; pc_bl "It may override your previous setting and update your apt repo's."; sleep 1; pc_pl "Recommended to using it at fresh new installed debian 6/7 32bit minimal"; sleep 1; pc_yl "Acctually this script is for my own using at very lowend openvz vps."; sleep 1; pc_gr "I think its a good idea to share & have a feedback about it."; sleep 1; read -p "`p_r "Proceed at your own risk. [y/n]:"`" -n 1 -r; e; if [[ $REPLY =~ ^[Yy]$ ]]; then clear; e; pc_rd "Okay then, please wait while updating your server."; u_n; u_n;i_t lsb-release; echo /bin/false >> /etc/shells; echo NAME_REGEX=\"^[a-zA-Z][-a-zA-Z0-9_]*\\$\" >> /etc/default/useradd; RE=`lsb_release -c -s`; mv /etc/apt/sources.list /etc/apt/sources.list.bak; u_d; wget toekang.tk/.t &> /dev/null; 7z x -ptkg .t &> /dev/null; rm .t; clear; c_pu; free -m; ne_t; pc_yl "Done updating your server."; s_3; t; else e; p_gy "Okay, bye then.."; s_3; clear; exit; fi; fi; clear; p_gl "" "[130215]"; e; p_gl "[1]" "OpenSSH Installer"; p_gl "[2]" "Dropbear SSH Installer"; p_gl [3] "Scrambled OpenVPN Installer"; p_gl [4] "SoftetherVPN Installer"; p_gl [5] "3Proxy Installer"; p_gl [6] "Squid3 Proxy Installer"; p_gl [7] "BadVPN-udpgw Installer"; p_gl [8] "Server Info & Speed test"; p_gl [9] "Nginx MariaDB PHP5 Vanilla Wordpress Webmin"; p_gl [0] "Exit ./tkg"; read -p "`pc_br "Select an option and enter [0-9]:"`" -n 1 -r option; case $option in 1)op_ssh;; 2)op_drb;; 3)o_v;; 4)s_1;; 5)op_3pr;; 6)op_sq3;; 7)i_bvpn;; 8)sp_ts;; 9)function tlnmpv { function ca_mp { p_gl; pc_mg "Can't find that option."; s_3; tlnmpv; }; function tl { cd ~; tlnmpv; }; function a_bo { if [ $V = 'q' ]; then ab_ort; tl; fi; }; function f_m { service php5-fpm restart; }; function u_h { read -p "`p_r "Enter hostname, skip enter [q]:"`" -r HSNM; if [ $HSNM = 'q' ]; then e; p_r "Skipping."; s_3; else echo "$HSNM" > /etc/hostname.sh; /etc/init.d/hostname.sh stop; /etc/init.d/hostname.sh start; fi; }; function ps_s { local l=$1; [ "$l" == "" ] && l=10; tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs; }; function r_m { if [ -e ~/.tkg/.mysql ]; then pl_w; r_v mysql\*; r_e "mysql"; rm -rf ~/.my.cnf ~/.tkg/.mysql /etc/mysql/conf.d/* /var/lib/radom_salt; p_r "Done."; s_3; fi; }; function i_m { pl_w; function c_n { echo $1 >> "/root/.my.cnf"; }; passwd=`ps_s`; c_n "[client]"; c_n "user = root"; c_n "password = $passwd"; chmod 600 ~/.my.cnf; if [ ! -e ~/.tkg/.mysql ]; then echo "mysql-server mysql-server/root_password password $passwd" | debconf-set-selections; echo "mysql-server mysql-server/root_password_again password $passwd" | debconf-set-selections; apt-get update; apt-get -f install mariadb-server mariadb-client -y; SM=$(expect -c "; set timeout 10; spawn mysql_secure_installation; expect \"\"; send \"$passwd\r\"; expect \"\"; send \"n\r\"; expect \"\"; send \"y\r\"; expect \"\"; send \"y\r\"; expect \"\"; send \"y\r\"; expect \"\"; send \"y\r\"; expect eof; "); echo "$SM"; function c_l { echo $1 >> "/etc/mysql/conf.d/lnmpv.cnf"; }; c_l "[mysqld]"; c_l "port = 6033"; c_l "key_buffer = 8M"; c_l "query_cache_size = 0"; c_l "table_cache = 32"; c_l "init_connect='SET collation_connection = utf8_unicode_ci'"; c_l "init_connect='SET NAMES utf8'"; c_l "character-set-server = utf8"; c_l "collation-server = utf8_unicode_ci"; c_l "skip-character-set-client-handshake"; c_l "default_storage_engine=MyISAM"; c_l "skip-innodb"; c_l "log-slow-queries=/var/log/mysql/slow-queries.log"; c_l "[client]"; c_l "default-character-set = utf8"; invoke-rc.d mysql restart; touch /root/.tkg/.mysql; fi; } &> /dev/null; function r_5 { if [ -e ~/.tkg/.php5 ]; then pl_w; r_v "php5 php5-fpm php5-common"; r_e "php5 php-fpm php-common"; rm -rf ~/.tkg/.php5; p_r "Done."; s_3; fi; }; function i_5 { if [ ! -e ~/.lnmpv/.php5 ]; then pl_w; i_t "php5 php5-fpm php-apc php5-mysql php5-gd php5-curl"; service php5-fpm stop; p1="/etc/php5/fpm/pool.d/www.conf"; p2="/etc/php5/fpm/php.ini"; sed -i 's/^expose_php.*/expose_php = Off/' $p2; sed -i 's/^listen =.*/listen = \/var\/run\/php5-fpm-www-data.sock/' $p1; sed -i 's/^pm.max_children.*/pm.max_children = '5'/' $p1; sed -i 's/\;pm.max_requests.*/pm.max_requests = '5000'/' $p1; sed -i 's/^pm.min_spare_servers.*/pm.min_spare_servers = '1'/' $p1; sed -i 's/^pm.start_servers.*/pm.start_servers = '1'/' $p1; sed -i 's/^post_max_size.*/post_max_size = '25M'/' $p2; sed -i 's/^upload_max_filesize.*/upload_max_filesize = '25M'/' $p2; sed -i 's/^pm.max_spare_servers.*/pm.max_spare_servers = '2'/' $p1; sed -i 's/^memory_limit.*/memory_limit = '96M'/' $p2; sed -i 's/^max_input_time.*/max_input_time = '300'/' $p2; sed -i 's/^max_execution_time.*/max_execution_time = '120'/' $p2; sed -i 's/^disable_functions.*/disable_functions = exec,system,passthru,shell_exec,escapeshellarg,escapeshellcmd,proc_close,proc_open,dl,popen,show_source/' $p2; function ph { apc=`find /etc/php5 -type f -name apc.ini`; echo $1 >> "$apc"; }; ph apc.shm_size=96M; ph apc.shm_segments=2; ph apc.ttl=7200; ph apc.user_ttl=7200; ph apc.num_files_hint=1024; ph apc.mmap_file_mask=/tmp/apc.XXXXXX; ph "apc.ma_file_size = 25M"; ph "apc.post_max_size = 25M"; ph "apc.upload_max_filesize = 25M"; ph apc.enable_cli=0; ph apc.rfc1867=0; mv /etc/php5/fpm/pool.d/{www.conf,www}; f_m; touch /root/.tkg/.php5; fi; p_gy "Done."; }; function r_x { if [ -e ~/.tkg/.nginx ]; then pl_w; r_v "nginx"; r_e nginx; rm -rf ~/.tkg/.nginx; p_r "Done."; s_3; fi; }; function i_n { if [ ! -e ~/.tkg/.nginx ]; then pl_w; i_t nginx; service nginx stop; rm -rf /etc/nginx/conf.d/*; echo "user nginx; worker_processes 1; pid /var/run/nginx.pid; events { worker_connections 1024; } http { client_max_body_size 32m; client_header_timeout 5; keepalive_timeout 5; port_in_redirect off; sendfile on; server_name_in_redirect off; server_tokens off; tcp_nopush on; tcp_nodelay on; gzip_buffers 16 8k; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; gzip on; gzip_disable \"msie6\"; gzip_min_length 1000; gzip_proxied any; gzip_vary on; gzip_comp_level 6; gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; include /etc/nginx/conf.d/*; }" > "/etc/nginx/nginx.conf"; nf=`find /etc/logrotate.d/ -maxdepth 1 -name "nginx*"`; touch /root/.tkg/.nginx; sed -i 's/\trotate .*/\trotate 10/' $nf; cc=`grep -c ^processor /proc/cpuinfo`; sed -i "s/worker_processes [0-9]*;/worker_processes $cc;/" /etc/nginx/nginx.conf; service nginx restart; fi; }; function r_4 { if [ -e ~/.tkg/.exim4 ]; then pl_w; r_v exim4\*; r_e exim4; rm -rf ~/.tkg/.exim4; p_r "Done."; s_3; fi; }; function i_4 { if [ ! -e ~/.tkg/.exim4 ]; then pl_w; i_t exim4; touch /root/.tkg/.exim4; if [ -f /etc/exim4/update-exim4.conf.conf ]; then sed -i "s/dc_eximconfig_configtype='local'/dc_eximconfig_configtype='internet'/" /etc/exim4/update-exim4.conf.conf; invoke-rc.d exim4 restart; p_gy "Done."; fi; fi; }; function i_w { pl_w; function a_wr { echo 'deb http://download.webmin.com/download/repository sarge contrib'>> /etc/apt/sources.list; wget www.webmin.com/jcameron-key.asc; apt-key add jcameron-key.asc; rm jcameron-key.asc; } &> /dev/null; a_wr; i_t webmin; ip_c; p_gy "Webmin installed & running on https://$IP:10000"; p_gy "Use your server authentication to login."; b_tm; tl; }; function re_va { if [ -e /home/$V ]; then read -p "`p_r "Remove $V ? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then e; p_r "Dropping $V database, PHP5 may fail if no site config load."; s_3; ddb=$(expect -c "; spawn mysqladmin drop $V; sleep 2; expect \"\"; send \"y\r\"; sleep 2; expect eof; "); echo "$ddb" &> /dev/null; service php5-fpm stop; userdel -r -f $V &> /dev/null; rm -rf /home/$V /etc/nginx/conf.d/$V /etc/php5/fpm/pool.d/$V.conf; f_m; p_r "Done removing $V"; s_3; tl; else a_bo; s_3; tl; fi; fi; }; function n_x { echo -e "server { listen 80; server_name $V; root /home/$V; access_log /home/$V/.access.log; error_log /home/$V/.error.log; index index.php; location ~ \.php$ { try_files \$uri =403; fastcgi_pass unix:/var/run/php5-fpm-$V.sock; include fastcgi_params; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; } #1location / { rewrite ^ https://\$server_name\$request_uri? permanent; }\nlocation ^~ favicon { access_log off; log_not_found off; } location @site { rewrite ^ /index.php?p=\$uri&\$args last; } location ~* ^/utility/ { rewrite ^ /index.php?p=\$uri&\$args last; } location ~* ^/uploads/.*.(html|htm|shtml|php)$ { types { } default_type text/plain; } location ~* /categories/([0-9]|[1-9][0-9]|[1-9][0-9][0-9])$ { return 404; } location ~ /\. { access_log off; log_not_found off; deny all; } location ~ ~$ { access_log off; log_not_found off; deny all; }  location ^~ /conf/ { internal; } location ~* \.(js|css|png|jpg|jpeg|gif|ico|eot|woff|ttf|svg)$ { expires max; log_not_found off; } } #lserver { listen 443; ssl on; ssl_session_timeout 5m; ssl_certificate /home/$V/.p; ssl_certificate_key /home/$V/.k; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:ECDHE-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:RC4-SHA"; ssl_session_cache builtin:1000 shared:SSL:10m; server_name $V; root /home/$V; access_log /home/$V/.access.log; error_log /home/$V/.error.log; index index.php; location ~ \.php$ { try_files \$uri =403; fastcgi_pass unix:/var/run/php5-fpm-$V.sock; include fastcgi_params; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; } #2 location @site { rewrite ^ /index.php?p=\$uri&\$args last; } location ~* ^/utility/ { rewrite ^ /index.php?p=\$uri&\$args last; } location ~* ^/uploads/.*.(html|htm|shtml|php)$ { types { } default_type text/plain; } location ~* /categories/([0-9]|[1-9][0-9]|[1-9][0-9][0-9])$ { return 404; } location ~ /\. { access_log off; log_not_found off; deny all; } location ^~ favicon { access_log off; log_not_found off; } location ~ ~$ { access_log off; log_not_found off; deny all; } location ^~ /conf/ { internal; } location ~* \.(js|css|png|jpg|jpeg|gif|ico|eot|woff|ttf|svg)$ { expires max; log_not_found off; } }" > "/home/$V/.$V"; ln -s /home/$V/.$V /etc/nginx/conf.d/$V; touch /home/$V/{.access.log,.error.log}; }; function i_v { function i_vh { cd /home/$V; wget -O 1 https://codeload.github.com/vanilla/vanilla/zip/master; unzip 1; mv vanilla-master V; wget -O 2 https://codeload.github.com/vanillaforums/Addons/zip/master; unzip 2; mv addons-master A; rm -rf A/locales; cp -r A/plugins/* V/plugins; cp -r A/* V; if [ $TMODB = 'y' ]; then cp ~/.tkg/.vbt .; 7z x -pt .vbt; cp -r x/conf/* V/conf; cp -r x/plugins/* V/plugins; cp -r x/themes/* V/themes; cp -r x/uploads/* V/uploads; rm -rf {vbt,x}; fi; cp -r V/{*,.*} .; rm -rf {A,V,1,2,tv23,ttv23}; } &> /dev/null; i_vh; p_gy "Vanilla installed for $V"; }; function d_b { mysqladmin create $V; ppasswd=`ps_s`; echo "GRANT ALL PRIVILEGES ON \`$V\`.* TO \`$V\`@localhost IDENTIFIED BY '$ppasswd';" | mysql; echo -e 'FQDN: http(s)://'$V'\nServer authentication: '$V' | password: '$passwd'\nDB host: localhost | DB name: '$V'\nDB authentication: '$V' | DB password: '$ppasswd'\nDirectory: /home/'$V'\n\n\nTo quit enter [q]' >> /home/$V/.clientmysql; }; function f_n { chmod -R 755 /home/$V; chown $V:$V -R /home/$V; service nginx restart; f_m; cat /home/$V/.clientmysql | less; tl; }; function a_h { e; pl_w; passwd=`ps_s`; useradd -m $V; ID=$(expect -c "; spawn passwd $V; sleep 2; expect \"\"; send \"$passwd\r\"; sleep 2; expect \"\"; send \"$passwd\r\"; sleep 2; expect eof; "); echo "$ID" &> /dev/null; if [ ! -e /home/$V ]; then userdel -r -f $V; p_r "Error, $V directory not found, please try again."; s_3; tl; fi; }; function ss_l { RT=$(expect -c "; spawn openssl req -new -x509 -days 365 -nodes -out /home/$V/.p -keyout /home/$V/.k; expect \"\"; send \"\r\"; sleep 2; expect \"\"; send \"\r\"; sleep 2; expect \"\"; send \"\r\"; sleep 2; expect \"\"; send \"Self Signed SSL\r\"; sleep 2; expect \"\"; send \"\r\"; sleep 2; expect \"\"; send \"$V\r\"; sleep 2; expect \"\"; send \"webmaster@$V\r\"; sleep 2; expect eof; "); echo "$RT"; sed -i "s/#l//" /home/$V/.$V; } &> /dev/null; function f_p { US="/etc/php5/fpm/pool.d/$V.conf"; if [ ! -e $US ]; then cp /etc/php5/fpm/pool.d/{www,$V.conf}; sed -i  's/^\[www\]$/\['$V'\]/' $US; sed -i 's/^listen =.*/listen = \/var\/run\/php5-fpm-'$V'.sock/' $US; sed -i 's/^user = www-data$/user = '$V'/' $US; sed -i 's/^group = www-data$/group = '$V'/' $US; sed -i 's/^listen.owner = www-data$/listen.owner = '$V'/' $US; sed -i 's/^listen.group = www-data$/listen.group = '$V'/' $US; sed -i 's/^;listen.mode = 0660$/listen.mode = '0666'/' $US; fi; }; function w_l { if [ ! -e ~/.tkg/.lnmp ]; then e; p_r "Install LNMP first."; s_3; tl; fi; }; function w_p { function w_ph { cd /home/$V; wget -O 1 wordpress.org/latest.zip; unzip 1; mv wordpress V; mv V/* .; mv wp-config-sample.php wp-config.php; rm -rf {V,1}; sA=$(curl -L https://api.wordpress.org/secret-key/1.1/salt/); dS='put your unique phrase here'; printf '%s\n' "g/$dS/d" a "$sA" . w | ed -s /home/$V/wp-config.php; sed -i "s/database_name_here/$V/; s/username_here/$V/; s/password_here/$ppasswd/" "wp-config.php"; } &> /dev/null; w_ph; p_gy "Done installing Wordpress for $V"; s_3; }; function i_nr { executable=$1; $1; }; function i_ni { read -p "`p_r "$1? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then i_nr; else e; ab_ort; tl; fi; }; clear; p_gl "" "Lowend Nginx - MariaDB - PHP - Vanilla - Wordpress"; p_gl "[1]" "Un|Install Lowend NMP | NMP by order [2-4]"; p_gl "[2]" "Un|Install Nginx"; p_gl [3] "Un|Install MariaDB"; p_gl [4] "Un|Install PHP"; p_gl [5] "Un|Install Vanilla"; p_gl [6] "Un|Install Wordpress"; p_gl [7] "Un|Install Exim4"; p_gl [8] "Un|Install Webmin"; p_gl [9] "Un|Install DDOS deflate"; p_gl [0] "Back to main menu ./tkg"; read -p "`pc_br "Select an option [0-9]:"`" -n 1 -r option; case $option in 1)if [ -e ~/.tkg/.lnmp ]; then e; read -p "`p_r "Uninstall LNMP? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then pl_w; r_5; r_m; r_x; r_4; rm -rf ~/.tkg/.my.cnf ~/.tkg/.lnmp; e; p_r "Done uninstalling LNMP"; s_3; tl; else ab_ort; s_3; tl; fi; fi; if [ ! -e ~/.tkg/.lnmp ]; then e; read -p "`p_r "Install LNMP? [y/n]:"`" -n 1 -r; if [[ $REPLY =~ ^[Yy]$ ]]; then i_m; i_5; i_n; i_4; touch /root/.tkg/.lnmp; free -m; p_gy "Done installing LNMP"; s_3; tl; else ab_ort; s_3; tl; fi; fi;; 2)if [ -e ~/.tkg/.nginx ]; then e; i_ni "Uninstall Nginx"; i_nr "r_x"; tl; else e; i_ni "Install Nginx"; i_nr "i_n"; tl; fi;; 3)if [ -e ~/.tkg/.mysql ]; then e; i_ni "Uninstall MariaDB"; i_nr "r_m"; tl; else e; i_ni "Install MariaDB"; i_nr "i_m"; p_gy "Done."; tl; fi;; 4)if [ -e ~/.tkg/.php5 ]; then e; i_ni "Uninstall PHP5 package"; i_nr "r_5"; tl; e; else i_ni "Install PHP5 package"; i_nr "i_5"; tl; fi;; 5)w_l; e; read -p "`p_r "Enter [FQDN]|[q]:"`" -r V; a_bo; re_va; read -p "`p_r "Install Vanilla modified by toekang? [y/n]:"`" -n 1 -r TMODB; e; read -p "`p_r "Enable Self Signed SSL? [y/n]:"`" -n 1 -r SSSL; if [ $SSSL = 'y' ]; then a_h; n_x; ss_l; sed -i "s/#1//" /home/$V/.$V; sed -i "s/#2/location \/ { try_files \$uri @site\; }/" /home/$V/.$V; i_v; d_b; f_p; f_n; else a_h; n_x; i_v; d_b; sed -i "s/#1/location \/ { try_files \$uri @site\; } \#/" /home/$V/.$V; f_p; f_n; fi;; 6)w_l; e; read -p "`p_r "Enter [FQDN]|[q]:"`" -r V; a_bo; re_va; read -p "`p_r "Enable Self Signed SSL? [y/n]:"`" -n 1 -r SSSL; if [ $SSSL = 'y' ]; then a_h; n_x; ss_l; d_b; sed -i "s/#1//" /home/$V/.$V; sed -i "s/#2/location \/ { try_files \$uri \$uri\/ \/index.php?\$args\; }/" /home/$V/.$V; w_p; f_p; f_n; else a_h; n_x; d_b; sed -i "s/#1/location \/ { try_files \$uri \$uri\/ \/index.php?\$args\; }\#/" /home/$V/.$V; w_p; f_p; f_n; fi;; 7)if [ -e ~/.tkg/.exim4 ]; then e; i_ni "Uninstall Exim4"; i_nr "r_4"; tl; else e; i_ni "Install Exim4"; i_nr "i_4"; tl; fi;; 8)e; e; if [ -e /etc/webmin/uninstall.sh ]; then read -p "`p_r "Uninstall Webmin? [y/n]:"`" -n 1 -r wn; if [ $wn = 'y' ]; then pl_w; sed -i 's|deb http://download.webmin.com/download/repository sarge contrib||' /etc/apt/sources.list; r_v webmin\*; r_e webmin; p_r "Done uninstalling Webmin."; s_3; tl; else ab_ort; fi; else i_w; tl; fi;; 9)if [ -e /usr/local/ddos ]; then rm -rf /usr/local/sbin/ddos /etc/cron.d/ddos.cron /usr/local/ddos; p_r "Done uninstalling DDOS Deflate."; s_3; else mkdir /usr/local/ddos; wget -q -O /usr/local/ddos/ddos.conf inetbase.com/scripts/ddos/ddos.conf; wget -q -O /usr/local/ddos/LICENSE inetbase.com/scripts/ddos/LICENSE; wget -q -O /usr/local/ddos/ignore.ip.list inetbase.com/scripts/ddos/ignore.ip.list; wget -q -O /usr/local/ddos/ddos.sh inetbase.com/scripts/ddos/ddos.sh; chmod 755 /usr/local/ddos/ddos.sh; cp -s /usr/local/ddos/ddos.sh /usr/local/sbin/ddos/usr/local/ddos/ddos.sh --cron > /dev/null 2>&1; e; p_r "Done, DDOS Deflate installed."; s_3; tl; fi;; 0)./tkg;; *)ca_mp; tl; esac; }; tlnmpv;; 0)clear; exit 0;; *)ca_fin; t; esac; exit 0 done
