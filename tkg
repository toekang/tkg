#!/bin/bash
ap_u () { apt-get -qq update; }; s1 () { sleep 0.4; }; s2 () { sleep 2; }; s () { sleep 0.1; }; e () { echo $1; }; c () { clear; }; fi_nd () { rm -rf `find / -name *$1*`; }; r_v () { apt-get purge -y $1 --auto-remove --no-install-recommends; apt-get clean; }; pc_b () { echo -e "\e[0m  \e[30;48;5;8m $1 \e[0m "; }; pc_br () { echo -e "\n\e[0m  \e[30;48;5;8m $1 \e[0m "; }; pc_rd () { echo -e "\n\e[0m  \e[30;48;5;8m $1 \e[0m "; }; p_i () { e; e; e; }; p_gl () { echo -e "\n\e[30;38;5;9m  $1 \e[30;48;5;8m $2 \e[0m "; s; }; re_ec () { read -p "`pc_br "$1 [y/n]:"`" -n 1 -r a; e; }; pl_w () { pc_br "Please wait while process is running on background!"; s2; }; pl_i () { pc_br "Please wait while installing & configuring $1 ..."; e; s2; }; ca_fin () { e; pc_br "Can't find that option, enter [0-9]|[ctrl+c] to quit"; s2; }; t () { cd ~; ./tkg; }; b_tm () { read -p "`pc_br "Back to main [enter]:"`"; }; i_t () { ap_u; apt-get -t $RE-backports install -y -qq $1 --no-install-recommends; }; ip_c () { IP=`hostname --ip-address`; }; dp_i () { dpkg -i ~/.tkg/$1; e; } &> /dev/null; dp_r () { e; dpkg -P $1; }; ne_t () { e; netstat -tulpn | grep $1; }; ne_a () { c; e; netstat -tuln; pc_br "$1"; e; }; tohpn () { s_s () { /etc/init.d/ssh $1; }; ropt=`dpkg -l|grep -e 6.8p1 -e 6.6p1-hpn14v6 | awk '{print $3}'`; if `dpkg -l|grep -e 6.8p1 -e 6.6p1-hpn14v6 &> /dev/null`; then e; re_ec "Uninstall OpenSSH $ropt?"; if [ $a = 'y' ]; then dp_r "openssh-tkg openssh-hpn-tkg" &> /dev/null; t; else t; fi; fi; ne_a "[1] OpenSSH 6.8p1 or [2] OpenSSH 6.6p1 HPN14v6"; read -p "`pc_br "Select and enter to install [1-2]:"`" -n 1 -r SS; e; if [ $SS = '1' ]; then SSH=`echo OpenSSH 6.8p1`; SI=`echo .tossh`; elif [ $SS = '2' ]; then SSH=`echo OpenSSH 6.6p1 HPN14v6`; SI=`echo .tohpn`; else pc_br "Enter 1 or 2"; s2; tohpn; fi; read -p "`pc_br "Enter listen port for $SSH:"`" -r APT; pl_i $SSH; dp_i $SI; sed -i 's|Port 22|Port '$APT'|' /etc/ssh/sshd_config; s_s restart; ssh -V; ne_t $APT; pc_br "$SSH installed, config: /etc/ssh/sshd_config"; b_tm; t; }; t3pry () { if [ -e /usr/bin/3proxy ]; then e; re_ec "Uninstall 3Proxy?"; if [ $a = 'y' ]; then dp_r 3proxy; t; else t; fi; fi; ne_a "3Proxy 0.7.1.2 Tiny Proxy Server"; read -p "`pc_br "Enter listen port for 3Proxy:"`" -r APT; read -p "`pc_br "Enter 3Proxy auth user name:"`" -r UN; read -s -p "`pc_br "Enter 3Proxy auth user password [hidden]:"`" -r PA; e; pl_i 3Proxy; dp_i .t3pry; cfg=/etc/3proxy/3proxy; sed -i 's/^users 0:CL:0/users '$UN':CL:'$PA'/' $cfg; sed -i 's/^proxy -n -a -p88/proxy -n -a -p'$APT'/' $cfg; /etc/init.d/3proxy start; ne_t $APT; pc_br "3Proxy installed, auth & config: /etc/3proxy/3proxy"; b_tm; t; }; tbudp () { if [ -e /usr/bin/badvpn-udpgw ]; then e; re_ec "Uninstall Badvpn-udpgw?"; if [ $a = 'y' ]; then dp_r badvpn-udpgw; t; else t; fi; fi; e; re_ec "Install Badvpn-udpgw?"; if [ $a = 'y' ]; then dp_i .tbudp; ne_t badvpn-udpgw; pc_br "Badvpn-udpgw installed"; b_tm; t; else t; fi; }; tdrbr () { if [ -e /usr/sbin/dropbear ]; then e; re_ec "Uninstall Dropbear?"; if [ $a = 'y' ]; then dp_r dropbear; t; else t; fi; fi; ne_a "SSH Dropbear 2015.67"; read -p "`pc_br "Enter listen port for Dropbear:"`" -r APT; pl_i Dropbear; dp_i .tdrbr; echo -e "NO_START=0\nDROPBEAR_PORT=$APT\n#DROPBEAR_EXTRA_ARGS="-p "\n#DROPBEAR_BANNER=""\nDROPBEAR_RECEIVE_WINDOW=65536" > /etc/default/dropbear; /etc/init.d/dropbear start; ne_t $APT; pc_br "Dropbear installed, config: /etc/default/dropbear"; b_tm; t; }; tovpn () { ip_c; if [ -e /etc/openvpn ]; then e; re_ec "Uninstall OpenVPN?"; if [ $a = 'y' ]; then dp_r openvpn; sed -i '/18.1.1.0/d' /etc/rc.local; iptables -t nat -D POSTROUTING -s 18.1.1.0/24 -j SNAT --to $IP; t; else t; fi; fi; hh_m () { echo -e "`cat /etc/openvpn/.$PR`\nserver 18.1.1.0 255.255.255.0\nproto $PR\nport $APT" >> /etc/openvpn/$PR$APT.conf; iptables -t nat -A POSTROUTING -s 18.1.1.0/24 -j SNAT --to $IP; sed -i '$ i\iptables -t nat -A POSTROUTING -s 18.1.1.0/24 -j SNAT --to-source '$IP'' /etc/rc.local; on=$PR$APT.ovpn; echo -e "`cat /etc/openvpn/.cs`\nproto $PR\nremote $IP $APT\n<ca>\n`cat /etc/openvpn/ca.crt`\n</ca>" >> ~/$on; } &> /dev/null; ne_a "OpenVPN 2.3.6 XOR-Patched|Scrambled|PAM Auth"; read -p "`pc_br "Enter protocol for OpenVPN [tcp|udp]:"`" -e -i tcp PR; read -p "`pc_br "Enter listen port for OpenVPN:"`" -r APT; pl_i OpenVPN; dp_i .tovpn; cd /etc/openvpn; tar -xzf .easyrsa3rc2.tgz; cd Easy*; ./easyrsa init-pki; echo -e "" | ./easyrsa build-ca nopass; echo -e "" | ./easyrsa gen-req server nopass; echo -e "yes" | ./easyrsa sign server server; ./easyrsa gen-dh; mv pki/{ca.crt,dh.pem} ..; mv pki/private/* ..; mv pki/issued/* ..; cd ~; hh_m; /etc/init.d/openvpn start; ne_t $APT; pc_br "OpenVPN installed, ovpn: ~/$on, config & sample: /etc/openvpn"; b_tm; t; }; tsevn () { if [ -e /usr/bin/vpnserver ]; then e; re_ec "Uninstall SoftetherVPN Server?"; if [ $a = 'y' ]; then dp_r vpnserver; t; else t; fi; fi; samp=/usr/vpnserver/.samp; add_test () { vpncmd /server localhost:5555 /password: /in:$samp; vpnserver stop; cfg=/usr/vpnserver/vpn_server.config; sed -i '13s/.*/bool IPsecMessageDisplayed false/' $cfg; sed -i '18s/.*/bool Disabled true/' $cfg; sed -i 's|RC4-MD5|AES256-SHA|' $cfg; sed -i 's|5555|'$PO'|' $cfg; echo -e "Server admin password:\n$PA\n\nStandard authentication for userclient:\n$SA | $SP" > $samp; chmod 0400 $samp; mv $samp ~/.vpnserverauth; } &> /dev/null; get_vpnserver () { echo -e "ServerPasswordSet $PA\nHubCreate VPN /PASSWORD:$PA\nHubDelete DEFAULT\nHub VPN\nKeepDisable\nSecureNatEnable\nOpenVpnEnable yes /PORTS:5555\nSstpEnable no\nVpnAzureSetEnable no\nListenerDelete 443\nListenerDelete 1194\nListenerDelete 992\nUserCreate $SA /GROUP:none /REALNAME:none /NOTE:none\nUserPasswordSet $SA /PASSWORD:$SP" > $samp; vpnserver start; } &> /dev/null; ne_a "SoftetherVPN Server 4.14.9529"; read -p "`pc_br "Enter listen port for vpnserver:"`" -r PO; read -s -p "`pc_br "Enter password for vpnserver admin [hidden]:"`" -r PA; e; pc_br "Standard authentication for SoftetherVPN Client & OpenVPN clone"; read -p "`pc_br "Enter user name:"`" -r SA; read -s -p "`pc_br "Enter user pasword [hidden]:"`" -r SP; e; pl_i "SoftetherVPN Server"; dp_i .tsevn; get_vpnserver; s2; add_test; vpnserver start; s2; h_a () { cd ~; vpncmd /server localhost:"$PO" /password:"$PA" /cmd OpenVpnMakeConfig sovpn; unzip sovpn.zip; ov=$SA-$PO.ovpn; mv *openvpn_remote* $ov; sed -i '/#/d' $ov; sed -i '/^\s*$/d' $ov; sed -i 's|proto udp|proto tcp|' $ov; sed -i '/<ca>/i auth-nocache\nroute 0.0.0.0 0.0.0.0' $ov; rm -rf read* *_site_* sovpn.zip; } &> /dev/null; h_a; ne_t $PO; pc_br "Auth: ~/.vpnserverauth, ovpn clone: ~/$SA.ovpn"; pc_br "Remove /usr/vpnserver/vpn_server.config if not suitable."; b_tm; t; }; tsqui () { ip_c; if [ -e /etc/squid ]; then e; re_ec "Uninstall Squid?"; if [ $a = 'y' ]; then dp_r squid; gpasswd -d proxy shadow &> /dev/null; t; else t; fi; fi; ne_a "Squid 3.4.12-1 PAM Auth"; read -p "`pc_br "Enter listen port for Squid:"`" -r APT; pl_i Squid; dp_i .tsqui; sq_ui () { cfg=/etc/squid/squid.conf; sed -i '1s/^/http_port '$APT'\n/' $cfg ; sed -i '1s/^/acl ip1 myip '$IP'\ntcp_outgoing_address '$IP' ip1\ncache deny all\n/' $cfg; gpasswd -a proxy shadow; cp /etc/pam.d/login /etc/pam.d/squid; } &> /dev/null; sq_ui; /etc/init.d/squid start; s2; ne_t $APT; pc_br "Squid installed, config: /etc/squid/squid.conf"; b_tm; t; }; ttslh () { if [ -e /usr/sbin/sslh ]; then e; re_ec "Uninstall SSLH?"; if [ $a = 'y' ]; then dp_r sslh; t; else t; fi; fi; ne_a "SSLH 1.17 Applicative Protocol Multiplexer"; read -p "`pc_br "Enter listen port 1 for sslh:"`" -r PO1; read -p "`pc_br "Enter listen port 2 for sslh:"`" -r PO2; pl_i SSLH; dp_i .ttslh; sh=/etc/default/sslh; sed -i 's|9797|'$PO1'|' $sh; sed -i 's|7979|'$PO2'|' $sh; service sslh restart; ne_t sslh; pc_br "SSLH installed, config: /etc/default/sslh"; b_tm; t; }; tlnmpv () { ca_mp () { e; pc_br "Can't find that option, enter [0-9]|[ctrl+c] to quit"; s2; tlnmpv; }; tl () { cd ~; tlnmpv; }; a_bo () { if [ $V = 'q' ]; then tl; fi; }; f_m () { service php5-fpm restart; }; ps_s () { local l=$1; [ "$l" == "" ] && l=10; tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs; }; r_m () { if [ -e ~/.tkg/.mysql ]; then pl_w; r_v mariadb*; r_v mysql*; fi_nd mysql; fi_nd mariadb; userdel -r -f mysql; sed -i '/mariadb/d' $slt; rm -rf ~/.my.cnf /var/lib/radom_salt; pc_br "Done."; s2; fi; }; i_m () { pl_w; passwd=`ps_s`; echo -e "[client]\nuser = root\npassword = $passwd" >> /root/.my.cnf; chmod 600 ~/.my.cnf; if [ ! -e ~/.tkg/.mysql ]; then m_ys () { echo "mysql-server mysql-server/root_password password $passwd" | debconf-set-selections; echo "mysql-server mysql-server/root_password_again password $passwd" | debconf-set-selections; if [ $RE = 'wheezy' ]; then echo -e 'deb http://ftp.osuosl.org/pub/mariadb/repo/10.1/debian wheezy main' >> /etc/apt/sources.list; apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db; fi; i_t mariadb-server; echo -e "$passwd\nn\ny\ny\ny\ny" | mysql_secure_installation; echo -e "[mysqld]\nport = 6033\nkey_buffer = 12M\nquery_cache_limit = 256K\nquery_cache_size = 4M\ntable_cache = 32\ninit_connect='SET collation_connection = utf8_unicode_ci'\ninit_connect='SET NAMES utf8'\ncharacter-set-server = utf8\ncollation-server = utf8_unicode_ci\nskip-character-set-client-handshake\ndefault_tmp_storage_engine = MyISAM\ndefault_storage_engine = MyISAM\nskip-innodb\n#log-slow-queries=/var/log/mysql/slow-queries.log\n[client]\ndefault-character-set = utf8" >> /etc/mysql/conf.d/tkg.cnf; }; m_ys; invoke-rc.d mysql restart; touch /root/.tkg/.mysql; fi; }; r_5 () { if [ -e ~/.tkg/.php5 ]; then pl_w; r_v php5*; rm -rf ~/.tkg/.php5; pc_br "Done."; s2; fi; }; i_5 () { if [ ! -e ~/.lnmpv/.php5 ]; then pl_w; i_t "php5-fpm php-apc php5-mysql php5-gd php5-curl"; service php5-fpm stop; p1="/etc/php5/fpm/pool.d/www.conf"; p2="/etc/php5/fpm/php.ini"; sed -i 's/^expose_php.*/expose_php = Off/' $p2; sed -i 's/^listen =.*/listen = \/var\/run\/php5-fpm-www-data.sock/' $p1; sed -i 's/^pm.max_children.*/pm.max_children = '5'/' $p1; sed -i 's/\;pm.max_requests.*/pm.max_requests = '5000'/' $p1; sed -i 's/^pm.min_spare_servers.*/pm.min_spare_servers = '1'/' $p1; sed -i 's/^pm.start_servers.*/pm.start_servers = '1'/' $p1; sed -i 's/^post_max_size.*/post_max_size = '250M'/' $p2; sed -i 's/^upload_max_filesize.*/upload_max_filesize = '250M'/' $p2; sed -i 's/^pm.max_spare_servers.*/pm.max_spare_servers = '2'/' $p1; sed -i 's/^memory_limit.*/memory_limit = '96M'/' $p2; sed -i 's/^max_input_time.*/max_input_time = '300'/' $p2; sed -i 's/^max_execution_time.*/max_execution_time = '120'/' $p2; sed -i 's/^disable_functions.*/disable_functions = exec,system,passthru,shell_exec,escapeshellarg,escapeshellcmd,proc_close,proc_open,dl,popen,show_source/' $p2; apc=`find /etc/php5 -type f -name apc*.ini`; echo -e "extension=apc.so\napc.enabled=1\napc.shm_size=32M\napc.shm_segments=1\napc.ttl=7200\napc.user_ttl=7200\napc.num_files_hint=1024\napc.mmap_file_mask=/tmp/apc.XXXXXX\napc.max_file_size = 1M\napc.post_max_size = 250M\napc.upload_max_filesize = 250M\napc.enable_cli=0\napc.rfc1867=0" >> $apc; mv /etc/php5/fpm/pool.d/{www.conf,www}; f_m; touch /root/.tkg/.php5; fi; pc_br "Done."; }; r_x () { if [ -e ~/.tkg/.nginx ]; then pl_w; r_v nginx*; fi_nd nginx; pc_br "Done."; s2; fi; }; i_n () { if [ ! -e ~/.tkg/.nginx ]; then pl_w; i_t nginx-light; service nginx stop; rm -rf /etc/nginx/conf.d/*; echo 'user www-data; worker_processes '`grep -c ^processor /proc/cpuinfo`'; pid /var/run/nginx.pid; events { worker_connections 1024; } http { client_max_body_size 32m; client_header_timeout 5; keepalive_timeout 5; port_in_redirect off; sendfile on; server_name_in_redirect off; server_tokens off; tcp_nopush on; tcp_nodelay on; gzip_buffers 16 8k; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; gzip on; gzip_disable "msie6"; gzip_min_length 1000; gzip_proxied any; gzip_vary on; gzip_comp_level 6; gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; include /etc/nginx/conf.d/*; }' > /etc/nginx/nginx.conf; touch /root/.tkg/.nginx; service nginx restart; fi; }; r_4 () { if [ -e ~/.tkg/.exim4 ]; then pl_w; r_v exim4*; userdel -r -f Debian-exim; fi_nd exim4; pc_br "Done."; s2; fi; }; i_4 () { if [ ! -e ~/.tkg/.exim4 ]; then pl_w; i_t exim4; touch /root/.tkg/.exim4; if [ -f /etc/exim4/update-exim4.conf.conf ]; then sed -i "s/dc_eximconfig_configtype='local'/dc_eximconfig_configtype='internet'/" /etc/exim4/update-exim4.conf.conf; invoke-rc.d exim4 restart; pc_br "Done."; fi; fi; }; i_w () { pl_w; a_wi () { i_t "libnet-ssleay-perl libauthen-pam-perl libio-pty-perl apt-show-versions"; wget -O 1 http://www.webmin.com/download/deb/webmin-current.deb; dpkg -i 1; rm 1; }; a_wi; ip_c; pc_br "Webmin installed & running on https://$IP:10000"; pc_br "use your system authentication to login."; b_tm; tl; }; re_va () { if [ -e /home/$V ]; then re_ec "Remove $V?"; if [ $a = 'y' ]; then pc_br "Dropping $V database, PHP5 may fail if no config load."; s2; echo -e "y\n" | mysqladmin drop $V; service php5-fpm stop; userdel -r -f $V; fi_nd $V; f_m; pc_br "Done removing $V"; s2; tl; else a_bo; s2; tl; fi; fi; }; n_x () { echo -e "server { listen 80; server_name $V; root /home/$V; access_log /home/$V/.access.log; error_log /home/$V/.error.log; index index.php; location ~ \.php$ { try_files \$uri =403; fastcgi_pass unix:/var/run/php5-fpm-$V.sock; include fastcgi_params; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; } #1location / { rewrite ^ https://\$server_name\$request_uri? permanent; }\nlocation ^~ favicon { access_log off; log_not_found off; } location @site { rewrite ^ /index.php?p=\$uri&\$args last; } location ~* ^/utility/ { rewrite ^ /index.php?p=\$uri&\$args last; } location ~* ^/uploads/.*.(html|htm|shtml|php)$ { types { } default_type text/plain; } location ~* /categories/([0-9]|[1-9][0-9]|[1-9][0-9][0-9])$ { return 404; } location ~ /\. { access_log off; log_not_found off; deny all; } location ~ ~$ { access_log off; log_not_found off; deny all; }  location ^~ /conf/ { internal; } location ~* \.(js|css|png|jpg|jpeg|gif|ico|eot|woff|ttf|svg)$ { expires max; log_not_found off; } } #lserver { listen 443; ssl on; ssl_session_timeout 5m; ssl_certificate /home/$V/.p; ssl_certificate_key /home/$V/.k; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:ECDHE-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:RC4-SHA"; ssl_session_cache builtin:1000 shared:SSL:10m; server_name $V; root /home/$V; access_log /home/$V/.access.log; error_log /home/$V/.error.log; index index.php; location ~ \.php$ { try_files \$uri =403; fastcgi_pass unix:/var/run/php5-fpm-$V.sock; include fastcgi_params; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; } #2 location @site { rewrite ^ /index.php?p=\$uri&\$args last; } location ~* ^/utility/ { rewrite ^ /index.php?p=\$uri&\$args last; } location ~* ^/uploads/.*.(html|htm|shtml|php)$ { types { } default_type text/plain; } location ~* /categories/([0-9]|[1-9][0-9]|[1-9][0-9][0-9])$ { return 404; } location ~ /\. { access_log off; log_not_found off; deny all; } location ^~ favicon { access_log off; log_not_found off; } location ~ ~$ { access_log off; log_not_found off; deny all; } location ^~ /conf/ { internal; } location ~* \.(js|css|png|jpg|jpeg|gif|ico|eot|woff|ttf|svg)$ { expires max; log_not_found off; } }" > "/home/$V/.$V"; ln -s /home/$V/.$V /etc/nginx/conf.d/$V; touch /home/$V/{.access.log,.error.log}; }; i_v () { i_vh () { cd /home/$V; wget -O 1 github.com/vanilla/vanilla/archive/master.zip; unzip 1; mv vanilla-master V; wget -O 2 github.com/vanilla/addons/archive/master.zip; unzip 2; mv addons-master A; cp -r A/plugins/* V/plugins; cp -r A/* V; if [ $TMODB = 'y' ]; then cp ~/.tkg/.vbt .; 7z x -ptkg .vbt; cp -r x/conf/* V/conf; cp -r x/plugins/* V/plugins; cp -r x/themes/* V/themes; cp -r x/uploads/* V/uploads; rm -rf {.vbt,x}; fi; cp -r V/{*,.*} .; rm -rf {A,V,1,2,tv23,ttv23}; }; i_vh; pc_br "Vanilla installed for $V"; }; d_b () { mysqladmin create $V; ppasswd=`ps_s`; echo "GRANT ALL PRIVILEGES ON \`$V\`.* TO \`$V\`@localhost IDENTIFIED BY '$ppasswd';" | mysql; echo -e 'FQDN: http(s)://'$V'\nServer authentication: '$V' | password: '$passwd'\nDB host: localhost | DB name: '$V'\nDB authentication: '$V' | DB password: '$ppasswd'\nDirectory: /home/'$V'\n\n\nTo quit enter [q]' >> /home/$V/.clientmysql; }; f_n () { chmod 0600 `find /home/$V -name ".*"`; chmod 0644 `find /home/$V -name "*.ico"`; chmod 0644 `find /home/$V -name "*.jpg"`; chmod 0644 `find /home/$V -name "*.css"`; chown $V:$V -R /home/$V; chmod 0711 /home/$V; service nginx restart; f_m; cat /home/$V/.clientmysql | less; tl; }; a_h () { passwd=`ps_s`; useradd -m $V; echo -e "$passwd\n$passwd" | passwd $V; }; ss_l () { echo -e "\n\n\nSelf Signed SSL\n\n$V\nsupport@$V" | openssl req -new -x509 -days 365 -nodes -out /home/$V/.p -keyout /home/$V/.k; sed -i "s/#l//" /home/$V/.$V; }; f_p () { US="/etc/php5/fpm/pool.d/$V.conf"; if [ ! -e $US ]; then cp /etc/php5/fpm/pool.d/{www,$V.conf}; sed -i 's/^\[www\]$/\['$V'\]/' $US; sed -i 's/^listen =.*/listen = \/var\/run\/php5-fpm-'$V'.sock/' $US; sed -i 's/^user = www-data$/user = '$V'/' $US; sed -i 's/^group = www-data$/group = '$V'/' $US; sed -i 's/^listen.owner = www-data$/listen.owner = '$V'/' $US; sed -i 's/^listen.group = www-data$/listen.group = '$V'/' $US; sed -i 's/^;listen.mode = 0660$/listen.mode = '0666'/' $US; fi; }; w_l () { if [ ! -e ~/.tkg/.lnmp ]; then e; pc_br "Install LNMPE first!"; s2; tl; fi; }; w_p () { w_ph () { cd /home/$V; wget -O 1 --no-check-certificate wordpress.org/latest.zip; unzip 1; mv wordpress V; mv V/* .; mv wp-config-sample.php wp-config.php; rm -rf {V,1}; sA=$(curl -L https://api.wordpress.org/secret-key/1.1/salt/); dS='put your unique phrase here'; printf '%s\n' "g/$dS/d" a "$sA" . w | ed -s /home/$V/wp-config.php; sed -i "s/database_name_here/$V/; s/username_here/$V/; s/password_here/$ppasswd/" "wp-config.php"; }; w_ph; pc_br "Done installing Wordpress for $V"; s2; }; i_nr () { executable=$1; $1; }; i_ni () { re_ec "$1?"; if [ $a = 'y' ]; then i_nr; else tl; fi; }; c; pc_br "Lowend Nginx | MariaDB 10| PHP5-FPM "; p_gl "[1]" "Un|Install LNMPE | or by order [2-5]"; p_gl "[2]" "Un|Install Nginx"; p_gl [3] "Un|Install MariaDB 10"; p_gl [4] "Un|Install PHP5-FPM"; p_gl [5] "Un|Install Exim4"; p_gl [6] "Un|Install Vanilla Forum"; p_gl [7] "Un|Install Wordpress"; p_gl [8] "Un|Install Webmin"; p_gl [9] "Un|Install DDOS deflate"; p_gl [0] "Back to main menu ./tkg"; read -p "`pc_br "Select option and enter [0-9]:"`" -n 1 -r option; case $option in 1)if [ -e ~/.tkg/.lnmp ]; then e; re_ec "Uninstall LNMPE?"; if [ $a = 'y' ]; then pl_w; r_5; r_m; r_x; r_4; rm -rf ~/.tkg/.my.cnf ~/.tkg/.lnmp; e; pc_br "Done uninstalling LNMPE"; s2; tl; else tl; fi; fi; if [ ! -e ~/.tkg/.lnmp ]; then e; re_ec "Install LNMPE?"; if [ $a = 'y' ]; then i_m; i_5; i_n; i_4; touch /root/.tkg/.lnmp; free -m; pc_br "Done installing LNMPE"; s2; tl; else tl; fi; fi;; 2)if [ -e ~/.tkg/.nginx ]; then e; i_ni "Uninstall Nginx"; i_nr "r_x"; tl; else e; i_ni "Install Nginx"; i_nr "i_n"; tl; fi;; 3)if [ -e ~/.tkg/.mysql ]; then e; i_ni "Uninstall MariaDB"; i_nr "r_m"; tl; else e; i_ni "Install MariaDB"; i_nr "i_m"; pc_br "Done."; tl; fi;; 4)if [ -e ~/.tkg/.php5 ]; then e; i_ni "Uninstall PHP5 package"; i_nr "r_5"; tl; e; else e; i_ni "Install PHP5 package"; i_nr "i_5"; tl; fi;; 6)w_l; e; read -p "`pc_br "Enter [FQDN]|[q]:"`" -r V; a_bo; re_va; read -p "`pc_br "Install Vanilla modified by tkg? [y/n]:"`" -n 1 -r TMODB; e; read -p "`pc_br "Enable Self Signed SSL? [y/n]:"`" -n 1 -r SSSL; if [ $SSSL = 'y' ]; then a_h; n_x; ss_l; sed -i "s/#1//" /home/$V/.$V; sed -i "s/#2/location \/ { try_files \$uri @site\; }/" /home/$V/.$V; i_v; d_b; f_p; f_n; else a_h; n_x; i_v; d_b; sed -i "s/#1/location \/ { try_files \$uri @site\; } \#/" /home/$V/.$V; f_p; f_n; fi;; 7)w_l; e; read -p "`pc_br "Enter [FQDN]|[q]:"`" -r V; a_bo; re_va; read -p "`pc_br "Enable Self Signed SSL? [y/n]:"`" -n 1 -r SSSL; if [ $SSSL = 'y' ]; then a_h; n_x; ss_l; d_b; sed -i "s/#1//" /home/$V/.$V; sed -i "s/#2/location \/ { try_files \$uri \$uri\/ \/index.php?\$args\; }/" /home/$V/.$V; w_p; f_p; f_n; else a_h; n_x; d_b; sed -i "s/#1/location \/ { try_files \$uri \$uri\/ \/index.php?\$args\; }\#/" /home/$V/.$V; w_p; f_p; f_n; fi;; 5)if [ -e ~/.tkg/.exim4 ]; then e; i_ni "Uninstall Exim4"; i_nr "r_4"; tl; else e; i_ni "Install Exim4"; i_nr "i_4"; tl; fi;; 8)e; e; if [ -e /etc/webmin/uninstall.sh ]; then re_ec "Uninstall Webmin?"; if [ $a = 'y' ]; then pl_w; a_wr () { dpkg --purge webmin; r_v "libnet-ssleay-perl libauthen-pam-perl libio-pty-perl apt-show-versions"; fi_nd webmin; }; a_wr; pc_br "Done uninstalling Webmin."; s2; tl; else tl; fi; else i_w; tl; fi;; 9)if [ -e /usr/local/ddos ]; then rm -rf /usr/local/sbin/ddos /etc/cron.d/ddos.cron /usr/local/ddos; s2; pc_br "Done uninstalling DDOS Deflate."; s2; tl; else dd_s () { mkdir /usr/local/ddos; wget -q -O /usr/local/ddos/ddos.conf inetbase.com/scripts/ddos/ddos.conf; wget -q -O /usr/local/ddos/LICENSE inetbase.com/scripts/ddos/LICENSE; wget -q -O /usr/local/ddos/ignore.ip.list inetbase.com/scripts/ddos/ignore.ip.list; wget -q -O /usr/local/ddos/ddos.sh inetbase.com/scripts/ddos/ddos.sh; chmod 755 /usr/local/ddos/ddos.sh; cp -s /usr/local/ddos/ddos.sh /usr/local/sbin/ddos/usr/local/ddos/ddos.sh --cron > /dev/null 2>&1; }; dd_s; e; pc_br "Done, DDOS Deflate installed."; s2; tl; fi;; 0)t;; *)ca_mp; tl; esac; }; c_pu () { cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo ); cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo ); freq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo ); pc_br "Linux distro & uptime:"; echo "`lsb_release -d`, Uptime:`uptime|awk '{ $1=$2=$(NF-6)=$(NF-5)=$(NF-4)=$(NF-3)=$(NF-2)=$(NF-1)=$NF=""; print }'`"; pc_br CPU:; e "CPU model: $cname"; e "CPU freq: $freq MHz, `e "Number of cores: $cores"`"; pc_br RAM:; free -ht; pc_br Disk:; df -H|grep -e Filesystem -e /dev/; re_ec "I/O speed 1gb test?"; if [ $a = 'y' ]; then io=$( ( dd if=/dev/zero of=test_$$ bs=64k count=16k conv=fdatasync && rm -f test_$$ ) 2>&1 | awk -F, '{io=$NF} END { print io}' ); echo "I/O speed: $io"; fi; }; sp_n () { if [ ! -e ~/sv ]; then wget -O sv --no-check-certificate https://raw.github.com/sivel/speedtest-cli/master/speedtest_cli.py &> /dev/null; chmod 100 sv; fi; e; e; pc_br "Download & upload test from speedtest.net"; e; ./sv --share|grep -e "Testing from" -e "Selecting best" -e "Hosted by" -e "Download:" -e "Upload:" -e "Share results:" -e "Failed to retrieve"; e; }; sp_ts () { pc_br "100MB file download test from:"; e; do_wn () { wget -O /dev/null http://$1 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}'; }; undip=`do_wn "jaran.undip.ac.id/debian/dists/wheezy/Contents-i386.gz"`; pc_br "UNDIP, Indonesia ID: $undip "; cachefly=`do_wn "cachefly.cachefly.net/100mb.test"`; pc_br "CacheFly: $cachefly "; coloatatl=`do_wn "speed.atl.coloat.com/100mb.test"`; pc_br "Coloat, Atlanta GA: $coloatatl "; linodeldn=`do_wn "speedtest.london.linode.com/100MB-london.bin"`; pc_br "Linode London, UK: $linodeldn "; linodejp=`do_wn "speedtest.tokyo.linode.com/100MB-tokyo.bin"`; pc_br "Linode, Tokyo, JP: $linodejp "; slsg=`do_wn "speedtest.sng01.softlayer.com/downloads/test100.zip"`; pc_br "Softlayer, Singapore, SG: $slsg "; slam=`do_wn "speedtest.ams01.softlayer.com/downloads/test100.zip"`; pc_br "Softlayer, Amsterdam, NL: $slam"; slwdc=`do_wn "speedtest.wdc01.softlayer.com/downloads/test100.zip"`; pc_br "Softlayer, Washington, DC: $slwdc "; }; sc_s () { cd ~; c; e; e; pc_br "Server Info & Download speed test"; e; e; p_gl [1] "Server info CPU | RAM | Disk"; e; p_gl [2] "100MB file download test from random source"; e; p_gl [3] "Download & upload test from speedtest.net"; e; p_gl [0] "Back to main menu ./tkg"; e; e; read -p "`pc_br "Select option and enter [0-3]"`" -n 1 -r csd; c; case $csd in 1)c_pu; b_tm; sc_s;; 2)sp_ts; b_tm; sc_s;; 3)sp_n; e; b_tm; sc_s;; 0)t;; *)sc_s; esac; }; r_ue () { r_v "aptitude* portmap* rsyslog* apache2* bind9* samba* sudo* nscd* xinetd* mail* exim4* whois* cron* sasl*"; }; u_n () { c; pc_br "Installing dependency ..."; s1; pl_w; i_t "nano p7zip-full zip unzip less dash ca-certificates liblzo2-2 libconfig9 dialog resolvconf libltdl7"; dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' | xargs apt-get -y purge; apt-get -y autoremove; echo -e '/bin/sh\n/bin/dash\n/bin/bash\n/bin/rbash\n/bin/false' > /etc/shells; echo -e 'SHELL=/bin/sh\nNAME_REGEX="^[a-zA-Z][-a-zA-Z0-9_]*\$"' > /etc/default/useradd; echo -e '@include common-auth\n@include common-account\n@include common-session\n@include common-password' > /etc/pam.d/sshd; rm -f /bin/sh; ln -s dash /bin/sh; echo -e 'nameserver 8.8.8.8\nnameserver 8.8.4.4' > /etc/resolvconf/resolv.conf.d/tail; wget -O .t goo.gl/Qsepoi; 7z x -p.tkgnew .t; rm .t; rm -rf `find / -name *.deb`; useradd -M -o -u 111 -s /bin/false $PU; echo -e "$PP\n$PP" | passwd $PU; } &> /dev/null; u_p () { ap_u; apt-get -t $RE-backports upgrade -y -qq --no-install-recommends; apt-get -t $RE-backports dist-upgrade -y -qq --no-install-recommends; }; u_d () { cp -r $slt $slt.bak; echo -e 'deb http://ftp.debian.org/debian '$RE' main contrib non-free\ndeb http://ftp.debian.org/debian '$RE'-backports main contrib non-free\ndeb http://ftp.debian.org/debian '$RE'-proposed-updates main contrib non-free\ndeb http://security.debian.org '$RE'/updates main contrib non-free' > $slt; echo -e 'Package: systemd\nPin: origin ""\nPin-Priority: -1' > /etc/apt/preferences.d/systemd; c; pc_br "PAM for Dropbear|Squid|Openvpn|SSLH"; read -p "`pc_br "Enter PAM username:"`" -r PU; read -s -p "`pc_br "Enter PAM user password:"`" -r PP; c; re_ec "Disable IPV6?"; if [ $a = 'y' ]; then echo net.ipv6.conf.all.disable_ipv6=1 > /etc/sysctl.d/disableipv6.conf; fi; c; re_ec "Remove unnecessary debian package?"; if [ $a = 'y' ]; then pl_w; ap_u; r_ue; r_ue; fi; if [ $RE = 'wheezy' ]; then c; pc_br "Not recommended, unless after fresh debian 7 install"; re_ec "Upgrade Debian 7 to 8 distro's?"; if [ $a = 'y' ]; then pl_w; ap_u; r_v plymouth*; sed -i 's/wheezy/jessie/g' $slt; RE=`echo jessie`; u_p; i_t upstart; else c; re_ec "Update Debian 7 package?"; if [ $a = 'y' ]; then pl_w; u_p; fi; fi; fi; c; pc_br "Installing tkg dependency ..."; pl_w; u_n; }; if [ ! -e /etc/debian_version ]; then pc_br "Debian distro's only!"; s2; exit; elif [ $USER != 'root' ]; then pc_br "Only root can run tkg!"; s2; exit; elif [ ! -e /usr/bin/lsb_release ]; then i_t lsb-release; fi; RE=`lsb_release -c -s`; slt="/etc/apt/sources.list"; if [ $RE != 'wheezy' ] && [ $RE != 'jessie' ]; then pc_br "Debian 7/8 distro's only!"; s2; exit; elif [ `getconf LONG_BIT` != '32' ]; then pc_br "Sorry, 32bit systems only!"; s2; exit; fi; if [ ! -e /root/.tkg ]; then c; pc_br "[OpenVZ Debian 7/8 32bit 270315]"; s1; e; pc_br "Halo, looks like this is your first time running tkg"; s1; e; pc_br "acctually tkg is for my own using at very lowend OpenVZ VPS."; s1; e; pc_br "However, please pay attention that tkg will override your previous"; s1; e; pc_br "configs & remove unnecessary package, it's recommended to run"; s1; e; pc_br "tkg on fresh installed debian 7/8 32bit minimal distro's."; s1; e; re_ec "Proceed running tkg at your own risk?"; if [ $a = 'y' ]; then c; u_d; c; e; lsb_release -a; re_ec "Systems need to reboot, reboot!"; if [ $a = 'y' ]; then reboot -f; else t; fi; else e; pc_br "Okay, bye then.."; c; exit; fi; fi; c; pc_br "Welcome to tkg quick installer script"; p_gl "[1]" "Un|Install OpenSSH"; p_gl "[2]" "Un|Install Dropbear SSH"; p_gl [3] "Un|Install OpenVPN"; p_gl [4] "Un|Install SoftetherVPN"; p_gl [5] "Un|Install 3Proxy"; p_gl [6] "Un|Install Squid Proxy"; p_gl [7] "Un|Install Badvpn-udpgw"; p_gl [8] "Un|Install SSLH"; p_gl [9] "Nginx|MariaDB|PHP5-FPM|Vanilla|Wordpress|Webmin"; p_gl [0] "Server Info & Speed test"`p_gl [S] "Speed test from speedtest.net"`; read -p "`pc_br "Select option and enter [0-9] or [ctrl+c] to quit:"`" -n 1 -r opt; case $opt in 1)tohpn;; 2)tdrbr;; 3)tovpn;; 4)tsevn;; 5)t3pry;; 6)tsqui;; 7)tbudp;; 8)ttslh;; 9)tlnmpv;; 0)sc_s;; *)ca_fin; t; esac
